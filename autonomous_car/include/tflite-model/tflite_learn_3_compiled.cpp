/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 20.06.2025 19:54:22

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 948192;
#else
constexpr int kTensorArenaSize = 947168;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,196,196,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[3] = { 11897, -27054, -26070, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<3, float> quant3_scale = { 3, { 0.00059580669039860368, 0.00026954870554618537, 0.00026888347929343581, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[3*1*1*32] = { 
  /* [0][0][][] */ 5,23,34,-81,-13,18,-29,4,-48,55,-1,34,-29,-51,8,-11,-43,67,127,63,-57,-62,-45,-55,-75,27,-45,60,23,-15,-11,-19, 
  /* [1][0][][] */ 54,-29,-36,-6,17,119,12,-1,127,-65,-20,-81,-41,75,40,-44,96,-47,-127,-71,-102,9,94,72,27,21,31,-59,-43,-19,-11,0, 
  /* [2][0][][] */ -48,76,-53,76,40,-69,-5,103,91,28,103,-55,-78,-97,83,114,-82,-52,-58,-92,86,107,-43,-68,62,-33,10,-127,51,-50,80,4, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant4_scale = { 3, { 0.0070115653797984123, 0.0031720998231321573, 0.0031642713584005833, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[32] = { 444, -480, -2028, -795, -1871, 381, -1666, -807, -824, 1390, -894, 360, -1464, -719, -677, -668, -578, -870, 1891, -1653, -893, -1059, -486, -1786, -628, -1521, -1730, -405, -1621, -1904, -961, -1559, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 5.4227009968599305e-05, 5.0044258387060836e-05, 6.0148959164507687e-05, 6.9235094997566193e-05, 6.302737892838195e-05, 5.380238508223556e-05, 5.638061702484265e-05, 5.3513482271227986e-05, 6.1366459704004228e-05, 5.6208595196949318e-05, 4.6994580770842731e-05, 0.00012520866584964097, 5.5607782996958122e-05, 8.016442006919533e-05, 5.4886684665689245e-05, 5.5055261327652261e-05, 6.2308681663125753e-05, 9.092892287299037e-05, 0.00019507005345076323, 5.7990368077298626e-05, 0.00010033314902102575, 5.5637818149989471e-05, 8.860229718266055e-05, 6.2188119045458734e-05, 6.9670946686528623e-05, 6.3683452026452869e-05, 5.9016358136432245e-05, 0.00025015484425239265, 5.5453350796597078e-05, 6.0488491726573557e-05, 5.1089809858240187e-05, 5.6621505791554227e-05, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[32*1*1*96] = { 
  /* [0][0][][] */ -39,-39,78,0,92,-8,-46,-40,30,-68,-58,37,63,-7,-18,86,-30,-9,-65,-49,-85,-90,-9,118,-120,8,99,-29,91,25,20,-54,74,-43,-64,43,-98,-73,-70,58,88,-47,-57,110,50,-83,84,-68,-23,-95,-96,80,-24,-70,-44,87,9,83,98,-51,-45,82,-52,66,-19,28,77,85,47,69,60,-91,104,-49,65,74,-67,-18,-59,14,56,19,89,-15,-33,-127,-75,60,-5,52,-50,-63,-2,48,21,11, 
  /* [1][0][][] */ -94,24,-63,3,-31,90,30,-22,22,-124,-105,41,35,-23,-15,43,121,-8,-30,123,-76,-48,43,30,35,-3,-27,118,8,-49,85,-41,26,87,-10,32,77,52,-17,-29,-95,-1,-20,-83,-21,10,-31,-22,39,-50,119,70,9,17,-79,-71,25,97,70,61,-29,68,-79,-68,-35,-1,64,-16,89,28,-18,9,-127,83,-52,10,67,-7,-43,80,-69,34,-31,-112,-9,67,-82,-89,76,87,80,0,60,16,20,2, 
  /* [2][0][][] */ -12,-22,-86,21,-63,-83,14,22,-100,17,-72,36,15,-59,15,-127,-87,-68,-13,-10,-113,-59,32,-34,-60,10,28,-43,-96,9,16,24,-91,-62,-115,-125,-109,20,30,-68,-123,-102,-39,-53,-107,43,-62,-103,22,-16,21,-113,-80,15,-30,-36,-97,19,-94,-41,-61,-6,-49,2,20,-11,-12,14,-108,4,-43,-96,-25,-100,-26,-27,-88,-63,-45,-41,-21,-112,-50,-62,-49,-118,-63,-71,16,33,-62,-42,-75,-103,-69,-95, 
  /* [3][0][][] */ 17,31,-24,-51,-31,38,-50,-6,-24,-14,33,-26,48,8,28,-9,98,84,-70,32,19,-87,-29,-44,-48,-85,-47,90,10,-81,45,19,-53,-37,-17,7,-29,-53,-2,54,-46,-67,-46,0,48,-6,-80,-56,114,-106,60,34,51,-15,41,-78,-122,-58,-89,-23,-41,9,-26,41,57,-42,-30,-33,-35,-127,-56,58,-22,-119,24,-83,40,113,53,-37,-78,-103,-18,-17,-15,-17,-51,-119,-86,-7,-58,-93,9,-98,-58,-9, 
  /* [4][0][][] */ -7,16,-35,0,-61,-64,-20,-21,-8,13,-46,0,-24,-72,-47,-80,-57,-53,-75,-34,25,-104,10,-25,-65,-50,4,-93,-76,-14,-83,-76,-3,32,-36,-103,-69,-37,-110,-3,-74,-78,-88,-98,-32,32,-18,3,-21,-66,-51,-80,-97,-20,-92,-30,-19,-103,-26,-28,-31,-88,-72,-84,-71,-13,-32,-64,-20,-101,-117,-101,-78,-17,32,-5,-8,-61,-56,-79,-34,-70,-105,-24,-40,-8,13,-35,-127,-83,-7,-10,-14,35,-107,-47, 
  /* [5][0][][] */ 69,-75,56,73,53,-119,46,85,71,-92,25,-16,40,57,40,71,73,54,-48,81,11,35,-4,18,-125,-51,25,-61,47,48,41,-78,-24,6,-43,17,-99,-21,40,56,-78,-30,56,108,-30,28,31,-73,-126,33,-26,35,60,-23,55,-16,86,73,-54,3,46,-40,3,-32,-57,90,10,37,57,-3,76,-60,-14,99,10,-51,25,-52,2,52,101,33,39,67,-47,-33,-15,8,19,-127,63,99,-27,29,27,-71, 
  /* [6][0][][] */ -22,-69,50,20,-99,-84,-38,11,-41,-98,-30,-101,30,7,51,-126,-4,-34,-35,39,-97,-127,46,10,-81,-99,-41,-80,-56,-122,1,-93,-106,-126,-70,-117,-46,-10,-122,26,31,6,-20,-49,-120,45,-103,-72,-98,-21,-56,-96,9,-71,37,-55,-29,-41,-88,51,-108,-34,11,-90,-74,15,40,-73,24,-43,-118,-41,5,-97,-105,-69,-96,-113,-85,-61,-11,-56,-5,-53,-89,-100,-65,-120,25,30,34,-23,-75,-85,23,-62, 
  /* [7][0][][] */ 54,58,-38,-40,-54,100,-13,-9,15,-41,-90,-25,28,-110,13,57,69,35,-72,110,-5,-7,2,91,-57,49,46,68,-69,54,-18,38,-5,6,38,76,-57,67,-23,6,28,-65,82,61,42,-4,70,-70,102,-77,-70,-25,-17,9,-12,0,87,-59,19,-34,22,-34,20,-93,-43,-72,59,1,-105,6,7,56,51,26,43,12,-45,81,-94,49,67,-81,-11,-110,73,-24,-127,39,65,20,60,41,-81,-124,-26,-47, 
  /* [8][0][][] */ -6,28,-39,-71,53,19,-48,17,-40,-4,43,87,10,-67,-58,-28,-21,89,-91,25,-21,-33,54,116,-110,22,59,66,-52,6,-57,85,48,-29,27,-21,93,-16,-22,91,8,72,-43,-58,0,-14,-13,72,52,-120,-32,26,-36,-60,-25,-81,9,101,-60,97,102,29,-43,78,-14,-39,-3,69,-71,38,3,-17,56,53,19,-20,-19,98,37,44,25,35,-76,-127,34,-53,30,-66,-1,-31,-85,90,-87,-95,-84,39, 
  /* [9][0][][] */ 22,-51,127,65,53,-68,-34,-105,34,49,-27,33,-26,-11,-80,-30,-21,-34,-99,-63,-11,91,-73,-111,104,11,-35,13,6,-44,-55,84,57,13,39,6,-44,46,41,-52,14,-21,25,-72,80,26,-82,105,-17,51,-92,-13,65,10,-27,96,93,-55,3,-35,-89,95,74,-25,-78,5,63,40,-19,74,86,-78,13,68,-80,-36,-78,-127,-60,104,35,58,64,62,-10,-78,55,-40,111,65,48,79,109,-21,46,8, 
  /* [10][0][][] */ -102,67,71,-70,-17,77,96,24,-32,-9,5,-110,75,55,-64,4,-8,94,-127,-38,-66,-1,49,-46,23,22,-123,-80,-55,38,-116,-92,62,79,101,72,-9,4,-41,55,-86,91,-101,-36,-116,-121,-24,-39,62,-4,33,23,48,-43,-118,-61,-93,-7,35,-57,6,30,62,28,103,-117,-89,-36,-11,-55,-122,-82,66,65,-81,61,-20,100,44,33,60,-50,37,49,-83,-9,64,-72,32,16,-23,-89,-88,-114,-107,-57, 
  /* [11][0][][] */ 60,50,6,35,14,19,0,38,80,23,34,0,-12,-14,49,34,-23,-41,57,1,108,38,2,-77,-35,-41,86,-6,31,25,-5,1,-46,-20,11,7,-53,26,37,-55,-3,13,-2,-14,-28,106,5,-52,9,89,36,24,-51,3,-9,8,-37,-42,-5,6,-23,7,67,-19,4,42,4,24,66,32,-3,-5,0,26,-41,29,-1,-14,47,25,-51,-3,42,14,15,120,0,127,-26,-4,55,-57,-29,7,1,-19, 
  /* [12][0][][] */ -26,22,-77,-34,34,-26,-59,-11,-81,24,-46,-25,-72,-25,2,-99,-113,-61,-70,-100,-14,-40,-25,38,-79,-66,39,-110,38,-25,-62,55,-82,-88,-72,-12,-38,-92,-50,-5,77,0,-124,-68,-51,-101,-68,54,-71,-121,-94,82,-8,37,-99,28,-15,-83,3,17,8,53,43,8,51,-7,-72,56,9,41,-3,22,27,55,-51,-28,-64,-7,-127,-109,-80,57,-1,21,-67,8,7,53,-106,-120,36,-3,55,-47,-10,28, 
  /* [13][0][][] */ 53,-49,50,38,41,34,35,64,37,-73,2,-11,49,25,44,-13,-69,-50,-40,4,28,-16,40,-19,-56,-1,-16,4,-60,-54,15,0,18,42,-19,9,-63,-25,-12,36,-49,39,-17,5,-40,10,-17,-51,-14,16,-48,-53,-66,-8,29,-45,-26,14,-34,-20,-28,52,-73,-7,-58,-43,-40,55,-43,-19,41,-23,-35,32,-27,-39,-62,22,31,-55,18,-55,25,-45,-32,-127,36,45,-28,-57,-68,30,47,-18,-9,-15, 
  /* [14][0][][] */ -76,-73,55,49,67,-7,-9,-99,-101,-62,46,47,-33,-101,-86,-62,-13,-31,-19,33,-57,-4,-10,74,-98,-87,-14,38,-87,-115,-70,29,55,-23,-43,2,89,82,12,-64,-44,-97,46,75,67,-99,39,-65,127,21,78,68,76,-59,-30,-9,-49,19,45,73,0,-84,-67,52,-69,-28,66,-91,-88,-89,-106,60,-15,62,34,-80,46,-63,35,20,28,-42,-86,-59,-87,-113,-126,53,77,12,65,-49,48,52,-62,49, 
  /* [15][0][][] */ 4,-10,-16,58,76,-55,52,-83,0,-36,-64,-27,62,-7,-97,-87,94,29,-97,37,3,-2,68,91,69,34,40,97,19,18,53,-63,-21,-1,-59,5,-22,92,86,-35,-25,89,-36,-19,22,-53,-31,-33,62,-33,23,53,-73,-127,-50,-22,54,46,-19,90,-19,-77,-23,83,-8,50,-48,-14,-54,-2,21,-63,-5,1,41,-108,2,81,76,85,-66,5,-72,-62,-109,-57,-87,5,76,75,-79,-46,40,28,-95,97, 
  /* [16][0][][] */ -55,-10,69,-60,28,46,-39,78,33,18,-60,100,11,-53,-24,-1,61,44,50,34,64,53,-48,53,-29,16,-40,30,-81,36,22,-24,-71,38,34,37,-41,28,-32,-37,20,-20,66,76,37,66,78,-34,-92,-127,-24,65,-26,73,53,36,-3,69,32,41,80,81,1,43,15,7,-9,76,-4,62,-17,-25,48,76,74,56,-8,54,-89,-21,9,-66,27,-2,26,34,73,10,29,-8,-45,96,35,-11,-81,10, 
  /* [17][0][][] */ -9,18,-7,16,-40,61,-50,-72,81,-55,30,-4,21,2,-72,-1,5,17,46,34,-37,-36,-13,-48,45,4,-60,12,28,-29,-37,32,-51,-32,-10,-17,-53,26,-62,-44,127,-39,-33,-26,71,-18,16,-80,119,37,-25,127,-33,81,23,-60,-75,18,-64,-77,93,-71,105,25,-61,-30,-3,-75,-69,-25,31,-2,-23,-83,-61,16,68,-38,21,-60,-19,-13,-64,17,-84,126,10,-19,-11,17,-67,-84,-33,27,49,-22, 
  /* [18][0][][] */ 22,29,53,6,-4,-20,-12,-27,22,32,8,-35,-18,59,44,5,4,-23,80,-22,71,11,44,-45,8,-12,0,-2,47,12,48,43,0,3,-33,-27,-43,24,37,-19,26,1,-17,-22,-19,127,8,0,-15,78,40,-15,12,40,19,58,-13,-9,21,5,10,17,9,11,17,-15,24,46,47,-44,4,33,-43,6,-27,44,35,-38,5,-41,-16,55,-6,59,43,84,40,68,22,-6,64,6,53,46,66,0, 
  /* [19][0][][] */ -19,-19,19,-5,6,-44,34,31,80,-77,-15,-41,-104,-11,-74,9,21,-110,47,7,-49,26,-74,-26,15,-92,-13,-88,-100,-127,-82,1,17,-94,-9,-37,-32,-85,-77,-108,1,-119,-96,-33,-103,-12,24,-102,7,-6,-64,-6,-62,62,-29,-40,-24,38,-39,-53,3,-80,109,10,-86,-38,-54,-35,-39,7,23,-73,-82,-119,-78,-95,-52,-115,-25,40,7,-117,-55,25,-99,-36,-30,-45,25,-21,-37,11,-57,51,15,-75, 
  /* [20][0][][] */ -21,-1,12,45,-55,-75,-5,0,-17,-19,-65,-28,-41,18,-11,-53,-69,-54,-55,-6,-20,-45,-30,-52,43,-38,-79,14,8,-22,-55,26,24,-10,-21,11,33,1,-22,-81,-46,10,-47,-71,-34,-52,-53,55,34,-127,-42,20,5,30,-17,-30,59,-6,48,14,19,-54,-54,-5,-22,-59,-42,-22,-65,-35,-56,20,-44,-5,-6,1,15,51,35,59,29,-34,33,13,14,40,-38,1,22,61,7,2,-10,-12,-26,22, 
  /* [21][0][][] */ 30,61,40,-85,67,-90,51,7,-71,-88,-82,-12,-22,-6,-76,-78,-81,-21,-32,2,42,-76,47,-53,37,-99,-32,66,-2,-31,-35,-44,-18,-8,-93,-92,106,71,-105,-32,-56,7,30,-16,-90,-91,-83,84,31,-109,2,73,21,-4,-127,-11,-48,32,-31,68,28,-94,-46,-21,65,-17,-27,-81,-116,-13,9,39,9,-6,42,16,-94,11,39,91,-4,27,22,-92,13,-112,6,-97,-87,72,71,-107,-87,-124,3,-20, 
  /* [22][0][][] */ 1,-17,-45,-53,36,-41,42,49,-39,26,-25,-45,55,-70,-49,-43,12,35,-127,-43,53,-44,3,22,23,-29,-45,39,-44,-45,-33,-59,18,20,-4,-13,-12,-50,-43,-53,16,-14,19,50,18,-72,48,-64,-58,-89,-28,-19,-32,-69,-31,7,-2,-17,-13,-6,39,-40,-57,-73,-66,15,-83,-27,51,47,-13,-7,-33,-12,25,-52,22,-49,33,27,48,-61,-37,-68,37,-6,42,-35,-42,0,-71,37,-1,-12,-44,38, 
  /* [23][0][][] */ 33,-25,-37,-8,38,-127,-30,-110,17,-95,48,45,-11,-104,-23,-48,28,-34,-78,32,24,-65,36,-40,-18,-58,27,-14,11,56,13,-73,-41,0,-21,-25,36,-45,-119,-24,-100,-40,-20,-99,-89,-57,36,-24,21,-115,-102,-35,28,-88,-40,39,-107,-44,43,59,-92,-64,-100,-45,-17,3,-122,-81,-11,-55,56,-86,-22,-59,-45,-91,21,-33,34,50,-73,-80,-21,-87,69,-34,65,-45,-94,-6,11,-24,47,-17,-55,17, 
  /* [24][0][][] */ -73,-45,-84,-59,-60,-80,-38,-75,-12,34,37,10,60,4,-59,-75,-41,32,-26,-37,4,-84,-50,-21,-4,-51,42,32,38,12,-18,-42,-27,-10,5,6,-38,-78,16,-4,-84,-66,65,-3,4,-48,-9,40,-45,-65,-32,15,32,-2,20,-62,-20,50,4,6,56,-21,-12,51,-69,32,-31,-61,-89,16,-70,-54,-34,2,54,39,39,-55,-101,-65,-62,-88,-82,-127,-1,-7,-33,-104,-15,-96,-31,-62,-54,-14,-113,4, 
  /* [25][0][][] */ -106,-74,-33,-26,23,-86,-126,57,19,-64,-51,41,25,-36,-104,-29,-99,-10,-9,-124,55,27,-52,-69,-4,-69,-89,-24,5,-30,-5,41,59,-108,-13,15,29,-84,3,-56,-91,-3,-91,-25,28,-5,18,-47,-118,20,-96,-54,11,1,-67,-12,-21,-12,-79,22,36,20,67,-19,-47,30,-64,-36,-100,-55,-13,-116,26,-127,29,16,13,22,-14,-1,11,1,-6,54,-77,19,-65,-57,-30,-55,38,6,-79,23,-45,-79, 
  /* [26][0][][] */ 9,-127,-52,-46,-108,-39,-47,-45,-91,-115,41,31,-95,-72,-29,-50,46,-18,-83,-89,-19,19,35,-27,16,9,-26,-8,-25,-34,-101,-37,-66,-82,-110,-117,-87,24,-75,41,-99,37,6,-16,-87,22,-64,35,-60,-5,-39,50,-28,-49,-33,-110,38,9,2,-17,-37,-102,18,-52,47,-50,-78,-1,-98,22,29,35,17,-108,-104,-27,-6,-115,-108,-34,-57,27,26,-61,16,-29,-66,-21,-100,44,-32,-22,-69,69,6,24, 
  /* [27][0][][] */ 2,-4,-16,-28,-34,-15,-32,54,28,15,19,-4,-12,25,16,0,6,-10,45,-35,56,8,-22,-25,-6,-1,-17,-18,11,18,1,-8,-7,8,-21,-28,-19,-19,4,7,-1,-15,2,-1,10,45,35,3,5,12,17,-10,-30,-3,-4,-9,6,-15,-20,-16,-13,-4,2,-10,-3,5,-26,12,24,2,-9,29,0,4,-12,-20,6,-32,71,2,-2,-5,19,1,-16,3,5,74,-16,10,-1,-19,5,8,127,-3, 
  /* [28][0][][] */ 31,-39,29,-4,-126,-12,-114,-97,-25,-121,8,16,-100,-105,-36,40,34,48,-94,19,-59,-20,-122,-96,-88,25,-104,-9,-95,-97,-39,-53,-64,-25,23,18,18,-121,-70,-15,97,-5,-111,1,-121,-45,-27,-1,54,-87,-60,-26,-105,33,2,-8,8,-48,24,2,-44,-72,-65,-35,6,19,-55,25,-99,-19,-119,-71,16,-9,-42,-115,-127,-48,-103,-3,-96,-109,45,-18,9,-77,12,-96,-64,-53,-66,-90,-70,2,-74,-89, 
  /* [29][0][][] */ 0,-5,2,-79,-105,-25,-127,-35,100,-48,-105,-108,32,-111,-73,-75,-110,28,-16,-91,-86,-65,-2,-41,-37,-37,-73,-61,-113,-44,36,-41,5,-39,-98,-87,-50,29,-47,25,-1,33,-77,16,-35,39,-76,-61,-32,-44,2,-106,9,-78,39,-7,-111,-3,-77,36,-126,29,-87,-78,-84,-78,-6,19,32,-99,-15,-89,36,11,-1,-20,39,-84,-61,-20,-46,-96,-41,-66,3,71,-1,25,-66,32,10,16,-111,-28,-34,4, 
  /* [30][0][][] */ -7,-54,-68,-6,-90,4,-63,-11,80,-38,-3,-48,-115,-17,21,9,-35,25,57,-110,12,-110,-95,-10,-94,-7,-68,97,-34,-91,-79,-26,-101,-88,-127,-74,13,-41,-4,20,74,-67,-25,83,65,-49,62,47,-60,27,14,-87,79,-44,-20,55,-84,-60,-68,-58,-88,-11,-64,-26,-93,-79,-94,47,-78,56,8,-36,-84,73,33,-80,-60,-66,-63,-62,4,-17,-88,-18,-104,20,-96,90,-32,-97,37,34,-60,-21,3,-85, 
  /* [31][0][][] */ 28,-103,-7,42,4,14,-79,-110,10,-48,-94,-101,42,-127,-70,50,-80,-102,-6,4,17,-7,-58,47,2,-119,-6,-3,-89,-89,2,48,-19,-18,-104,-39,40,-57,-86,-119,14,-86,-58,-10,-30,-76,-64,-15,21,-15,38,-54,-122,-53,-96,-16,-120,18,-31,52,-64,-36,122,-91,20,51,-68,-93,22,-126,-125,-26,-108,-65,-32,-28,-79,-68,6,35,-92,-66,9,93,8,48,-106,-19,-20,-73,-99,-76,-24,45,-38,-51, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0023046478163450956, 0.0021268809214234352, 0.0025563307572156191, 0.0029424915555864573, 0.0026786637026816607, 0.0022866013459861279, 0.002396176103502512, 0.002274323021993041, 0.0026080743409693241, 0.0023888652212917805, 0.0019972696900367737, 0.0053213681094348431, 0.0023633306846022606, 0.0034069877583533525, 0.0023326841183006763, 0.0023398485500365496, 0.0026481188833713531, 0.0038644792512059212, 0.0082904770970344543, 0.0024645905941724777, 0.0042641586624085903, 0.0023646072950214148, 0.0037655977066606283, 0.0026429949793964624, 0.0029610153287649155, 0.0027065465692430735, 0.0025081951171159744, 0.010631580837070942, 0.0023567674215883017, 0.002570760902017355, 0.0021713168825954199, 0.0024064138997346163, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[96] = { 240, -547, 3002, 4507, 2404, -3537, 2610, -1370, -2493, -679, 4243, -2172, 2222, 6106, 1376, 2183, -539, -610, -1156, 3153, 2049, -1259, 1167, -835, -468, 3063, 753, 863, 4864, 2034, 2720, 447, 1450, 3726, 3005, 2973, -844, 1699, 2104, -2804, -334, 644, 2, 857, -469, 425, -1256, 158, -5019, 1556, 877, -2589, 4140, -1278, 1393, 1050, 600, 1550, -617, -2412, 26, 771, 261, 3117, 3864, 1941, 3929, 4696, 7186, -1169, 2188, 3712, 2022, -1151, 2805, 5066, 146, -3132, 262, 516, 4595, 1221, -446, -1091, 569, 846, 934, -3088, 2438, -592, 2749, 559, 282, -2463, 437, 537, };
const TfArray<1, int> tensor_dimension7 = { 1, { 96 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00022372126113623381, 0.00025586766423657537, 0.00016943465743679553, 0.00016173490439541638, 0.0002434152556816116, 0.00015093474939931184, 0.00016352954844478518, 0.00024721154477447271, 0.00019728351617231965, 0.00035837877658195794, 0.00016208246233873069, 0.00027192593552172184, 0.00020118210522923619, 0.00012065807095495984, 0.00021661091886926442, 0.00023339116887655109, 0.00022419773449655622, 0.0002333588054170832, 0.00027255411259829998, 0.00015087498468346894, 0.00020888631115667522, 0.00017045804997906089, 0.00016276389942504466, 0.00027576432330533862, 0.0002979699638672173, 0.00017475715139880776, 0.00018449538038112223, 0.00032571976771578193, 0.00015613385767210275, 0.00017790633137337863, 0.00016630756726954132, 0.00022490555420517921, 0.00017110641056206077, 0.00016014363791327924, 0.00020975075312890112, 0.00016310774662997574, 0.00019984248501714319, 0.00023450572916772217, 0.00016763903840910643, 0.00018897128757089376, 0.00025202124379575253, 0.00022099878697190434, 0.00029822357464581728, 0.00024488038616254926, 0.00034237309591844678, 0.0001671893842285499, 0.00021021805878262967, 0.0002899841929320246, 0.00015410166815854609, 0.00025295946397818625, 0.00015175447333604097, 0.00021168509556446224, 0.00014966496382839978, 0.00022246225853450596, 0.00022362211893778294, 0.00019821284513454884, 0.00025491835549473763, 0.00016478626639582217, 0.00033230517874471843, 0.00020612905791494995, 0.00025945264496840537, 0.00021432556968647987, 0.00030031229835003614, 0.00016017700545489788, 0.00015100534074008465, 0.00019561366934794933, 0.00010605477291392162, 0.00013428810052573681, 0.00010653965000528842, 0.00024652981664985418, 0.00017108864267356694, 0.00018277703202329576, 0.00016267114551737905, 0.00025630157324485481, 0.00021374637435656041, 0.00015104518388397992, 0.00018146878574043512, 0.00022398716828320175, 0.00022792309755459428, 0.00024020228011067957, 0.00017464665870647877, 0.00026649193023331463, 0.00030699808849021792, 0.00026701125898398459, 0.00019549767603166401, 0.000160479627083987, 0.00023021049855742604, 0.00014595007814932615, 0.00022615861962549388, 0.0002796822227537632, 0.0001787156070349738, 0.00026507899747230113, 0.00021353631746023893, 0.00015189895930234343, 0.00036843592533841729, 0.0002419162483420223, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[96*1*1*16] = { 
  /* [0][0][][] */ 10,81,-64,13,64,-7,73,22,-29,6,29,-62,24,127,-66,-4, 
  /* [1][0][][] */ 4,15,-49,-56,-24,2,36,-127,49,-25,17,-32,-7,-48,-14,-17, 
  /* [2][0][][] */ -23,-33,26,96,63,66,-116,127,-34,-32,41,-51,-21,-81,-27,92, 
  /* [3][0][][] */ 88,-56,91,-44,-3,-7,-43,127,-29,60,38,42,-4,66,2,-22, 
  /* [4][0][][] */ -34,-30,-48,54,-54,-6,-33,-111,-13,-47,21,-9,-7,37,84,127, 
  /* [5][0][][] */ 118,20,-62,-52,-71,4,72,15,-12,28,110,127,109,-12,-88,-6, 
  /* [6][0][][] */ 37,-44,-42,-85,-88,22,-39,-67,-13,-2,-45,2,22,40,127,-55, 
  /* [7][0][][] */ -40,28,-7,-69,14,-29,-26,-19,-92,7,-45,-35,-127,6,-35,61, 
  /* [8][0][][] */ 58,61,45,6,64,8,49,-5,68,-19,35,-5,-127,-35,-61,10, 
  /* [9][0][][] */ -10,89,29,-18,-20,-5,-2,18,-18,41,-31,-26,42,127,21,1, 
  /* [10][0][][] */ 53,41,-73,47,12,-20,59,-68,-51,-29,-38,-62,-105,-127,30,118, 
  /* [11][0][][] */ 59,-3,28,57,-17,-42,-1,104,-86,-20,-45,10,23,-39,70,127, 
  /* [12][0][][] */ -38,-39,-29,22,7,-7,127,15,-37,27,37,11,-28,66,-13,94, 
  /* [13][0][][] */ 1,13,10,44,61,-32,125,127,-30,60,-65,23,51,54,-5,-19, 
  /* [14][0][][] */ -77,127,36,-14,28,37,26,50,-3,11,66,-39,-88,29,-27,13, 
  /* [15][0][][] */ 6,-2,-127,-58,52,-65,-57,-21,-22,-20,13,-41,6,-75,-49,61, 
  /* [16][0][][] */ 104,-27,-17,2,8,-59,75,-87,-15,40,127,87,53,-34,-16,33, 
  /* [17][0][][] */ 1,-10,-47,-66,-28,-94,127,-126,-17,-43,-36,69,17,59,12,89, 
  /* [18][0][][] */ 43,127,3,-49,45,-39,-36,-32,-44,72,-21,-14,-23,50,-23,-16, 
  /* [19][0][][] */ -57,-127,61,-53,22,-126,27,-114,23,36,79,117,29,-50,57,-16, 
  /* [20][0][][] */ -13,67,20,-4,36,-10,8,-12,39,-10,74,-16,-127,-7,-70,0, 
  /* [21][0][][] */ -31,118,-24,16,95,6,40,127,-106,57,-35,-44,-26,5,-78,-31, 
  /* [22][0][][] */ 8,-111,62,-7,42,-127,101,-27,14,-84,-82,-94,3,-111,-49,-93, 
  /* [23][0][][] */ -52,-96,-2,21,8,-46,40,-85,11,-45,73,36,-25,48,36,127, 
  /* [24][0][][] */ -15,-15,30,127,59,18,-64,-72,52,7,-52,24,5,14,-30,-23, 
  /* [25][0][][] */ -12,22,-5,-66,-49,-22,-13,-23,-50,89,-55,-19,65,127,44,16, 
  /* [26][0][][] */ -67,127,40,-1,58,-91,-56,-108,59,29,10,103,-7,-7,-122,102, 
  /* [27][0][][] */ -28,-127,-54,24,-56,66,7,-70,23,3,39,-11,31,-59,-60,-21, 
  /* [28][0][][] */ 23,79,-20,108,69,16,-68,-117,-111,24,127,-70,70,38,-66,-39, 
  /* [29][0][][] */ -90,103,-47,7,-20,9,-127,-74,-30,-25,-2,-7,-6,-56,-116,43, 
  /* [30][0][][] */ 80,94,-7,90,-83,-57,-95,-47,-17,-14,-8,-127,94,58,0,45, 
  /* [31][0][][] */ 127,52,-29,-19,-22,44,68,70,-32,24,47,9,36,44,5,-20, 
  /* [32][0][][] */ -60,-55,127,9,-36,90,57,38,-22,22,-25,23,6,73,115,35, 
  /* [33][0][][] */ 0,3,-109,-35,-22,-2,127,31,-11,3,61,-38,69,113,-33,75, 
  /* [34][0][][] */ -84,-34,38,40,11,-54,97,-3,-127,42,41,-4,51,23,-39,-2, 
  /* [35][0][][] */ -17,-11,-100,13,-118,99,-29,-28,-38,127,1,120,-101,56,55,63, 
  /* [36][0][][] */ -29,-124,109,-47,-88,27,-31,-37,34,97,-49,103,29,-127,-2,38, 
  /* [37][0][][] */ 56,-25,66,-2,121,-46,-96,90,-53,127,-62,-25,-65,-34,82,-28, 
  /* [38][0][][] */ 72,51,43,-37,0,-45,-67,103,17,86,-43,-127,-94,-90,-90,30, 
  /* [39][0][][] */ -97,-8,-48,-5,-53,-55,45,20,-127,-59,8,83,17,-16,-3,75, 
  /* [40][0][][] */ 127,32,-30,-101,-85,10,14,-33,26,-31,-25,-89,49,-22,36,27, 
  /* [41][0][][] */ 77,-115,-52,-14,30,1,-127,2,64,-2,-20,-89,87,-98,58,-42, 
  /* [42][0][][] */ -2,-35,-41,127,32,-82,-104,51,-6,6,30,13,-74,103,-108,3, 
  /* [43][0][][] */ -61,-26,-50,-82,-27,10,-7,68,19,-127,-26,23,-36,-18,-30,97, 
  /* [44][0][][] */ -31,13,8,28,-22,-29,6,71,34,-59,13,56,127,5,9,20, 
  /* [45][0][][] */ 39,85,-30,73,127,-51,-67,-29,108,-83,15,-88,-42,15,-90,28, 
  /* [46][0][][] */ -9,-32,-21,-36,127,-34,39,-3,-28,108,-34,-119,-9,95,-94,116, 
  /* [47][0][][] */ 57,-61,-15,14,67,17,-64,-25,-39,127,-45,31,29,-89,-38,-11, 
  /* [48][0][][] */ -4,7,-10,-58,-38,-42,101,-127,46,22,-10,36,53,18,17,9, 
  /* [49][0][][] */ 12,127,-30,108,95,44,93,41,-24,5,-74,-98,14,104,79,-103, 
  /* [50][0][][] */ 69,95,-35,7,-127,30,-92,-78,99,89,89,37,-99,-32,1,25, 
  /* [51][0][][] */ 127,-50,-71,20,-22,112,-120,-20,40,-28,-63,85,-16,-60,52,36, 
  /* [52][0][][] */ 13,-20,60,51,-39,-42,-127,-16,-6,-12,-69,-75,19,-56,28,12, 
  /* [53][0][][] */ 55,108,-3,-127,-19,70,36,-1,0,-15,-23,-51,66,-108,37,35, 
  /* [54][0][][] */ 57,104,15,-12,7,-62,-88,18,3,-23,-44,127,62,66,40,28, 
  /* [55][0][][] */ -4,29,79,35,64,-2,36,127,30,-52,-15,-46,76,74,-25,-32, 
  /* [56][0][][] */ 101,3,3,46,-3,127,-106,-14,-97,7,-116,-29,-51,50,-7,26, 
  /* [57][0][][] */ -71,-68,-64,-16,-66,-94,58,-17,-127,-85,40,100,11,16,4,88, 
  /* [58][0][][] */ 55,-35,67,-20,15,-41,-46,2,21,-4,-127,-39,19,-48,-6,16, 
  /* [59][0][][] */ 74,31,-72,66,6,42,51,-21,-19,-6,18,-87,-127,-20,8,49, 
  /* [60][0][][] */ -6,19,-42,55,0,-51,-23,-4,-41,-99,70,127,-48,-123,-24,17, 
  /* [61][0][][] */ -34,16,106,-111,-48,71,-24,127,-29,-105,36,48,58,14,54,77, 
  /* [62][0][][] */ 70,38,-8,-127,8,-1,-6,-21,-18,31,-56,42,22,-36,-59,-80, 
  /* [63][0][][] */ 13,-21,-37,-15,-66,-73,-59,-30,-62,-9,-35,-7,127,-31,78,-21, 
  /* [64][0][][] */ 40,21,20,2,-78,-4,-34,-108,83,127,18,-20,9,-40,-25,59, 
  /* [65][0][][] */ -22,18,-14,-50,-69,75,0,-36,49,-127,77,-64,49,73,-124,49, 
  /* [66][0][][] */ -88,100,-53,-83,1,-58,-126,-46,-53,123,127,4,-99,-55,39,13, 
  /* [67][0][][] */ 13,-26,-127,-127,78,83,-10,-32,-32,-18,46,-28,-7,42,27,42, 
  /* [68][0][][] */ 95,53,29,-120,-61,69,-25,59,-89,65,105,-57,-49,-32,-127,-23, 
  /* [69][0][][] */ 76,-92,43,-44,33,-92,-48,127,-20,26,54,88,-65,103,-52,6, 
  /* [70][0][][] */ 57,10,99,53,127,-28,117,-20,24,-17,-71,33,-89,91,-98,65, 
  /* [71][0][][] */ 10,20,55,-81,-127,-83,18,-15,7,18,46,-77,-81,-14,40,17, 
  /* [72][0][][] */ -75,-104,25,-98,58,-4,-18,29,-73,19,-127,-4,35,85,-45,89, 
  /* [73][0][][] */ 20,7,3,22,127,-85,-65,18,-57,34,-76,34,-26,-79,119,0, 
  /* [74][0][][] */ -74,-14,-127,-22,25,-50,-48,-28,-40,26,-81,-7,-32,-71,-1,61, 
  /* [75][0][][] */ 87,-21,14,-41,16,-1,-127,-6,21,-67,55,3,-24,-7,15,-14, 
  /* [76][0][][] */ 52,24,12,127,70,122,88,-40,110,-108,88,67,42,-91,-103,-8, 
  /* [77][0][][] */ -49,-70,94,7,26,-33,-8,-127,31,35,40,81,38,6,27,3, 
  /* [78][0][][] */ -36,3,-46,-35,-11,-70,49,-21,75,-4,63,-88,-127,-72,-125,-42, 
  /* [79][0][][] */ -106,-110,-69,15,90,24,-50,-31,16,75,-45,69,-24,-127,-5,-33, 
  /* [80][0][][] */ -18,-127,9,84,-19,-33,-92,38,-45,-8,47,14,-69,-9,-1,95, 
  /* [81][0][][] */ 63,45,-37,82,18,11,22,127,3,14,82,8,61,35,24,-5, 
  /* [82][0][][] */ -35,20,34,-56,40,-100,-94,-85,-16,60,-53,9,-43,127,-79,-35, 
  /* [83][0][][] */ 127,19,70,3,-54,-46,-55,-36,56,-87,13,-29,-3,-31,1,-24, 
  /* [84][0][][] */ 28,-13,-45,26,127,39,60,33,-48,-31,-61,-45,-42,-3,-112,3, 
  /* [85][0][][] */ 79,124,-51,-127,99,-66,22,-106,28,-98,96,33,16,-25,65,14, 
  /* [86][0][][] */ 105,-32,127,35,12,-40,60,22,-59,-86,-92,-34,0,31,-55,14, 
  /* [87][0][][] */ 7,34,14,-107,96,-8,-58,-20,41,-57,52,-75,-113,-127,-13,-3, 
  /* [88][0][][] */ -49,-38,6,12,16,22,-100,-17,-4,23,-79,-127,-26,-34,-1,-27, 
  /* [89][0][][] */ -60,-2,22,-12,41,30,-127,44,51,24,-71,-2,-9,-64,-23,-37, 
  /* [90][0][][] */ 3,-9,-33,-110,127,52,-91,18,58,56,10,-23,9,31,-33,-50, 
  /* [91][0][][] */ -25,-51,-15,22,-12,-1,-17,42,-61,-90,22,-23,-42,68,10,127, 
  /* [92][0][][] */ 20,105,-47,-43,-40,37,-118,32,-14,26,78,-12,-40,116,127,4, 
  /* [93][0][][] */ -44,95,-16,-75,64,111,-127,16,82,81,11,25,-69,21,-34,40, 
  /* [94][0][][] */ 41,78,127,10,-74,-3,8,16,-14,-86,-18,-44,-63,6,44,-33, 
  /* [95][0][][] */ 0,13,-9,0,127,-20,-126,44,18,-4,-86,44,-39,-12,69,-36, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant8_scale = { 96, { 0.001674254541285336, 0.0019148272695019841, 0.0012679918436333537, 0.0012103695189580321, 0.0018216377357020974, 0.0011295448057353497, 0.0012238000053912401, 0.0018500478472560644, 0.0014764033257961273, 0.0026819859631359577, 0.0012129704700782895, 0.0020350019913166761, 0.0015055791009217501, 0.00090296432608738542, 0.0016210430767387152, 0.0017466208664700389, 0.0016778202261775732, 0.001746378606185317, 0.0020397030748426914, 0.0011290975380688906, 0.0015632347203791142, 0.0012756505748257041, 0.0012180701596662402, 0.0020637272391468287, 0.0022299068514257669, 0.0013078235788270831, 0.0013807012001052499, 0.0024375768844038248, 0.0011684531345963478, 0.0013313910458236933, 0.0012445898028090596, 0.0016831173561513424, 0.0012805026490241289, 0.0011984610464423895, 0.0015697039198130369, 0.0012206434039399028, 0.0014955537626519799, 0.0017549617914482951, 0.0012545540230348706, 0.0014141973806545138, 0.0018860420677810907, 0.0016538804629817605, 0.0022318046540021896, 0.0018326023127883673, 0.0025622048415243626, 0.0012511890381574631, 0.001573201036080718, 0.0021701438818126917, 0.0011532449861988425, 0.0018930634250864387, 0.00113567931111902, 0.0015841799322515726, 0.0011200421722605824, 0.0016648325836285949, 0.0016735125100240111, 0.0014833580935373902, 0.0019077230244874954, 0.0012332048499956727, 0.0024868599139153957, 0.0015426003374159336, 0.0019416562281548977, 0.0016039402689784765, 0.0022474359720945358, 0.0011987107573077083, 0.0011300730984658003, 0.001463906723074615, 0.00079367816215381026, 0.0010049669072031975, 0.00079730682773515582, 0.001844945945776999, 0.0012803697027266026, 0.001367841730825603, 0.0012173759751021862, 0.0019180745584890246, 0.0015996057773008943, 0.0011303712381049991, 0.0013580512022599578, 0.0016762444283813238, 0.0017056996002793312, 0.001797592849470675, 0.0013069966807961464, 0.0019943357910960913, 0.0022974701132625341, 0.0019982222001999617, 0.0014630387304350734, 0.0012009753845632076, 0.001722817774862051, 0.001092241145670414, 0.0016924948431551456, 0.0020930473692715168, 0.0013374473201110959, 0.0019837617874145508, 0.0015980338212102652, 0.0011367605766281486, 0.0027572503313422203, 0.0018104196060448885, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[16] = { 10189, 17169, 7968, 5908, -1370, 6850, 7195, 7203, 10039, -5268, -10273, -10556, -15065, 9100, 7856, 9781, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 3.9857386582298204e-05, 5.722493733628653e-05, 4.7170531615847722e-05, 5.289653199724853e-05, 5.5826723837526515e-05, 5.556890755542554e-05, 7.4464682256802917e-05, 4.1077051719184965e-05, 6.1277445638552308e-05, 5.7142995501635596e-05, 3.8762642361689359e-05, 4.6127763198455796e-05, 5.0876486056949943e-05, 7.505665416829288e-05, 5.1336570322746411e-05, 7.2212365921586752e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[16*1*1*96] = { 
  /* [0][0][][] */ -74,106,28,-17,-53,-54,-56,24,-56,66,-26,-60,14,42,25,-22,-21,0,63,49,-11,-84,106,127,115,-34,-1,3,-78,-67,-114,9,-61,-25,22,11,30,15,3,28,-9,14,-27,3,-74,3,-63,48,21,17,-54,-40,6,21,54,-48,-44,-22,-54,71,76,50,4,-16,21,-35,-89,2,-59,-57,2,1,-17,16,-100,-36,-61,-7,-27,-72,0,38,52,-100,-26,24,14,58,8,8,11,46,-77,33,-84,21, 
  /* [1][0][][] */ 31,88,9,-40,-38,-61,-27,-7,-51,48,26,-83,-7,-1,-44,-21,-45,-6,-60,24,-24,-91,8,109,69,-85,11,-27,34,-51,45,-58,4,29,-17,49,52,44,-13,-41,12,-2,17,-35,0,57,-127,-26,-5,-21,-6,-27,14,-11,7,74,24,-35,-58,11,41,36,-11,-104,13,-8,-116,23,-3,-18,-75,-27,-39,3,3,-52,-23,-9,35,-119,17,4,-62,-68,-8,-40,-42,15,-78,10,-43,72,-21,70,-87,42, 
  /* [2][0][][] */ 84,-45,-16,7,8,-94,63,59,31,-1,-42,-41,-118,-47,-1,-72,-107,-8,-11,12,-49,-127,-60,46,30,-60,-33,-45,-4,3,-68,47,-50,107,-10,-14,-9,6,-27,30,-59,100,61,-9,-34,-14,-20,-37,42,-36,-17,-68,46,-3,2,28,70,-14,25,-14,-9,44,-53,12,79,0,-20,-34,39,44,-40,-6,-1,48,-15,63,25,-64,74,49,66,-40,-92,9,-91,40,8,31,1,-19,18,12,-34,52,-5,27, 
  /* [3][0][][] */ 14,21,-19,23,33,-56,-14,41,-10,47,71,31,15,11,-56,40,-13,-52,28,6,7,127,37,-6,-25,-13,-51,-20,38,-51,31,-31,-40,32,7,-39,26,67,50,0,-90,-16,2,52,-40,59,-30,-28,-7,-63,-3,-7,74,-96,-37,-70,-2,70,-68,0,31,22,-8,-21,23,14,-62,49,-25,-29,-15,-18,-44,-62,35,11,-5,-14,-33,-38,-2,-11,-84,-1,-6,-122,54,-17,19,-23,29,6,13,76,-55,72, 
  /* [4][0][][] */ 29,-3,7,13,12,44,-79,63,-15,45,101,-55,-18,0,7,-67,25,-52,-47,29,33,-11,40,19,-96,-39,-121,-4,-65,-57,1,14,-55,-61,-7,38,-14,35,28,12,-88,-25,21,-13,16,23,2,52,-67,64,6,33,50,-13,-122,28,10,-11,23,-22,52,-8,49,17,-25,28,-2,38,-127,-41,-64,82,55,-102,-14,-2,17,-31,11,80,-61,77,-71,56,2,26,13,-34,56,-8,36,2,-58,-45,50,25, 
  /* [5][0][][] */ -13,55,43,9,21,-8,64,4,25,56,-11,-10,49,-35,-43,-51,-1,-7,54,39,-69,-56,-60,75,-19,-3,45,17,49,-4,0,14,36,66,-16,14,20,44,13,9,2,95,65,-65,23,38,21,-12,-17,-8,-44,-9,-39,-2,12,-55,66,-18,-55,-45,27,105,-62,-2,84,-11,-65,-79,-79,7,-25,6,-68,-24,-51,-40,23,-21,-9,-19,127,-88,9,-90,-95,69,27,8,-35,47,50,27,-3,40,-6,72, 
  /* [6][0][][] */ -21,-35,-21,-24,-13,-102,46,9,-86,7,34,67,-18,-54,52,26,-8,8,13,11,-3,-20,-42,-30,-37,31,16,58,-2,46,90,-62,0,-17,-13,-73,0,10,10,46,48,2,11,8,-26,-46,-127,1,41,-117,-2,43,16,-3,-21,-61,13,-10,11,18,-71,32,-53,26,-12,-23,12,63,61,18,17,-80,-45,50,95,0,51,-41,30,-73,-11,-10,-90,48,-1,-77,22,-3,-47,45,-21,15,14,23,-20,70, 
  /* [7][0][][] */ 46,84,23,-25,13,-39,29,49,-55,2,-54,-97,-42,-12,4,-24,-84,-55,-53,19,-15,94,35,23,-13,-7,47,39,17,20,46,18,27,33,-9,13,11,17,-23,30,-106,-10,3,-68,30,-30,87,-39,66,-49,-38,-4,-32,-7,1,-8,26,1,-100,-17,-17,69,30,-20,-50,-26,-62,48,-39,-54,-127,50,10,64,14,66,-77,25,2,-41,9,-5,98,-68,56,-34,-19,-23,-16,45,-83,45,26,-66,-22,23, 
  /* [8][0][][] */ 9,49,-71,59,-38,-17,-54,43,-50,-8,38,25,-24,59,41,69,24,-20,32,34,40,-18,-13,6,-11,37,-47,6,-3,16,-24,-29,-25,-5,-3,-70,-16,4,53,1,10,-17,29,24,-25,-28,-2,23,-49,1,12,44,-8,-6,-38,93,-17,7,-9,-10,-10,3,19,24,-5,-44,-34,-18,-32,24,2,21,-41,-56,-127,-43,-28,30,-42,-49,-49,-33,-45,-27,-18,19,12,38,10,30,-24,-9,-62,-104,0,-44, 
  /* [9][0][][] */ 32,30,-106,77,-49,2,41,83,42,93,-24,110,-23,4,28,119,45,30,79,22,9,9,19,-56,0,-28,-11,-27,20,23,23,7,-5,6,3,-127,54,-60,-22,-32,24,31,59,-34,-26,4,24,37,15,66,7,-29,-65,-30,5,15,21,27,51,-39,-45,104,-73,-27,125,15,-25,7,-77,38,16,56,-27,56,-79,-41,-17,36,-9,0,36,-110,-14,-19,-45,35,-33,-29,-23,-10,10,9,49,32,-39,-13, 
  /* [10][0][][] */ 39,-10,-21,-30,-16,-54,37,-7,-29,-43,-3,-23,-77,-19,41,31,-64,-28,3,20,23,29,13,45,-28,38,14,2,-77,-50,-28,-10,50,-37,68,9,85,-52,89,73,7,-52,17,32,2,-67,-54,70,43,28,-41,-8,-13,-1,10,52,-26,-72,51,43,9,47,-32,-22,12,-68,0,55,50,-27,-7,35,120,60,48,-127,31,-18,44,-60,-24,34,52,25,-25,-38,3,60,-69,23,8,33,31,105,-51,6, 
  /* [11][0][][] */ 6,-107,56,-59,19,77,12,-50,89,-21,-13,61,8,-8,21,40,-49,21,19,-17,22,56,-30,-74,-41,89,-18,53,52,-78,68,68,17,30,44,37,-47,34,-112,-8,-39,74,-30,34,-43,-9,44,-51,14,-30,-34,-1,16,-20,53,-87,-61,-14,75,-43,-63,-59,-58,-64,-22,-30,70,18,127,51,106,-11,5,-11,119,-61,103,65,-32,77,4,34,23,86,56,51,32,-25,-11,-39,-44,-46,111,42,69,79, 
  /* [12][0][][] */ 82,-29,-45,-33,28,127,15,68,67,91,32,64,22,67,13,14,-23,68,51,39,73,-30,73,13,46,-3,-104,-66,-32,91,7,3,34,18,16,10,58,9,-29,-47,52,4,107,65,-46,75,-48,-33,-40,20,-17,16,-7,-29,8,-8,-33,87,-40,32,56,-13,41,-102,8,113,-27,-46,16,-41,60,74,-37,44,-17,12,10,25,-95,-39,-26,1,60,-43,-28,79,-6,-55,53,-3,-81,68,31,63,-58,-98, 
  /* [13][0][][] */ -38,38,42,-45,-3,-45,-6,-76,-30,-46,-14,-81,52,-80,-25,-57,-53,-35,-90,-34,-80,-3,15,73,-17,-5,78,9,-10,-47,33,47,-18,-19,-77,70,-24,-47,8,-41,49,7,-10,24,5,-46,6,-38,77,-16,-18,26,41,-37,-13,46,43,-72,-39,-20,45,38,26,-65,-21,-9,-38,67,-23,-58,-73,-30,-71,46,15,-43,-107,-21,23,42,-6,127,57,-42,57,-3,42,-21,-19,-6,-36,20,-49,18,-19,1, 
  /* [14][0][][] */ -14,-8,-66,-5,87,127,-63,3,46,-53,52,17,47,-21,-57,-85,-73,33,-20,86,40,-32,6,-14,14,87,-67,85,68,-10,0,25,63,23,-20,11,-48,51,53,21,73,24,21,-10,-33,-54,80,-43,-23,15,6,-29,46,55,-20,-5,50,60,-57,-14,-40,-92,-63,-85,-11,-29,-33,-20,-112,72,10,-13,-17,-82,-32,-37,53,0,-92,-18,4,0,39,-29,-29,86,-4,-8,7,87,49,-17,35,-59,-23,-68, 
  /* [15][0][][] */ -81,-70,34,-77,13,-9,-31,-100,-21,-31,9,36,-7,-11,16,52,-86,-42,16,-64,7,25,0,-90,-4,12,43,-22,-63,-127,-46,35,-16,24,49,-47,-25,-15,19,-47,-43,-28,13,-15,7,6,77,67,-35,7,46,-12,-19,-9,3,-59,-100,-6,87,-8,-32,-24,-47,20,-101,-21,18,28,60,-71,59,-28,65,-26,26,-34,2,-4,19,30,-16,113,62,48,52,-16,-88,-27,-7,-38,-73,-5,40,-54,2,50, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant10_scale = { 16, { 0.0016939388588070869, 0.0024320597294718027, 0.002004747511819005, 0.0022481025662273169, 0.0023726357612758875, 0.0023616785183548927, 0.0031647488940507174, 0.0017457746434956789, 0.002604291308671236, 0.0024285772815346718, 0.0016474123112857342, 0.0019604298286139965, 0.0021622506901621819, 0.0031899078749120235, 0.0021818042732775211, 0.0030690254643559456, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[96] = { -693, -26, -3773, -3511, 9586, -2527, 7139, 2368, 5254, -9168, -9266, -591, -5816, 14408, 10179, -5112, 23703, -6828, 132, 380, -11339, -4658, 5905, 703, 189, -2677, 10458, -3665, 3670, -5313, 3053, 2472, -5001, -15553, -582, 138, -1039, -1320, -2628, 3939, 1230, -6060, -929, -977, 13916, 69, -850, 13146, 9623, 9159, 2272, -4988, -1351, -9127, 2059, 10048, -2467, 1861, -2970, 10030, 9959, 2017, 11984, -12846, -240, 1980, -1064, 7216, -6054, 282, -2014, 970, 8003, 3043, -9420, 13344, 393, 5397, 9465, -8489, -5240, 8749, -4191, 9701, 9907, -5518, -7664, -4698, -10852, -3248, 20833, 6044, -7488, -1642, -3495, -280, };
const TfArray<96, float> quant11_scale = { 96, { 0.00029201526194810867, 0.00022474055003840476, 0.00012085633352398872, 0.00025096372701227665, 0.0001547972351545468, 0.00031102818320505321, 0.00030793133191764355, 0.0003191502473782748, 0.00018139749590773135, 0.00019659625831991434, 0.00010584415576886386, 0.00048505852464586496, 0.00032168990583159029, 8.5613442934118211e-05, 8.606529445387423e-05, 0.00015088073268998414, 0.00012384535511955619, 0.0001178867241833359, 0.00021761145035270602, 0.00014982663560658693, 9.3985079729463905e-05, 0.0002728738181758672, 0.00018113966507371515, 0.0004581470275297761, 0.00063816102920100093, 0.00020404257520567626, 0.00031095722806639969, 0.00011007719149347395, 0.0001240099809365347, 8.6118750914465636e-05, 0.00040195020847022533, 0.00021483721502590925, 0.00020355964079499245, 9.5199611678253859e-05, 0.00031739336554892361, 0.00016248597239609808, 0.00018950655066873878, 0.00015778130909893662, 0.0002156910632038489, 9.1007968876510859e-05, 0.00023485338897444308, 0.00016025459626689553, 0.00013391133688855916, 0.00024694672902114689, 7.7369950304273516e-05, 0.0001016094975057058, 0.00017552847566548735, 8.2731727161444724e-05, 0.0001095925981644541, 9.2318427050486207e-05, 0.00010910213313763961, 0.00010058334737550467, 0.00018739070219453424, 0.00012885873729828745, 0.00017260177992284298, 0.00014170139911584556, 0.0001793700794223696, 0.00021037965780124068, 0.00018143901252187788, 8.1802689237520099e-05, 0.00010543626558501273, 0.00020559837867040187, 0.0001100591107388027, 5.8999521570513025e-05, 0.00020911800675094128, 0.00027222005883231759, 0.00058262667153030634, 0.0001810347312130034, 0.0002376606862526387, 0.00029155786614865065, 0.0001751896197674796, 0.00012142968625994399, 0.00016279872215818614, 0.00016294127271976322, 0.0001718838611850515, 9.3482820375356823e-05, 0.00015386177983600646, 0.00011229248775634915, 9.314225462730974e-05, 0.00013658388343174011, 0.00019625353161245584, 0.00028967953403480351, 0.00025354378158226609, 0.00015281698142644018, 0.0001566234277561307, 0.00015796888328623027, 9.8122720373794436e-05, 0.00013189767196308821, 0.00033641341724433005, 0.00021477977861650288, 7.3197224992327392e-05, 0.00015549769159406424, 0.00018213306611869484, 0.00025613498291932046, 0.00015740073285996914, 0.00034362004953436553, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[1*3*3*96] = { 
  /* [0][0][][] */ 61,59,25,58,-127,-10,50,-6,24,16,48,85,10,-34,12,-49,-59,88,21,3,80,127,72,38,49,25,-51,34,-40,-23,-20,-42,9,61,-40,127,-22,112,25,-47,-43,-26,14,-44,-35,125,54,-5,-79,-100,-59,-28,127,88,-76,2,-75,-77,-39,-127,-111,54,-102,45,-52,51,51,-25,7,70,37,-75,1,-67,96,6,27,-87,-92,105,64,-14,52,-95,-47,-16,119,55,-30,-8,-31,11,127,27,83,-48, -29,-18,-35,30,-57,64,-69,-46,33,11,80,122,10,-121,-98,68,-111,89,18,101,127,36,71,29,68,127,21,22,33,127,-45,-127,127,118,4,91,94,127,18,-23,127,37,112,127,-35,12,127,-76,-53,-34,0,-32,67,127,-112,3,40,15,-41,-22,-15,-37,-111,83,-1,92,100,24,27,127,127,3,-25,12,-1,-127,127,-100,-97,127,29,14,127,-127,-34,-6,127,-12,127,41,-58,-38,119,-53,22,12, -20,-127,-4,99,-62,-17,-10,1,29,73,7,84,26,-18,26,-66,-44,16,-47,-53,69,86,8,127,13,30,-2,47,-20,86,-35,-92,-10,-30,-32,123,-72,83,40,71,-41,90,43,-32,-59,26,8,-51,69,-97,-62,57,74,33,11,115,72,-93,-30,-116,-73,51,-46,39,43,20,127,-45,12,70,39,69,-35,-76,62,31,75,-58,-98,75,43,-116,48,-96,-84,-7,16,64,-46,-91,-127,3,31,44,80,-46, 
  /* [0][1][][] */ 116,-35,58,127,-19,-27,89,37,-42,-24,-104,127,-34,-127,-127,10,-127,-2,95,55,-18,27,-127,-76,-10,33,-127,127,-127,-12,127,-11,76,117,6,103,-127,123,0,-66,45,-71,2,30,-127,6,16,-45,-127,-54,-127,14,70,-7,127,-61,-127,-27,57,-6,-127,-18,-57,93,-127,-63,53,-127,-3,3,-36,-84,28,103,127,-79,31,85,-107,42,127,-35,-34,77,-2,22,80,110,17,15,-105,-3,-14,-109,73,-24, -127,-2,-72,-40,-100,-127,-127,-127,12,-2,127,65,-43,51,-75,127,-13,-127,127,34,118,-111,-120,11,-127,112,-10,44,-101,-65,-92,34,-3,127,127,-49,-13,66,127,-127,-38,43,25,77,6,11,-75,-127,-16,-91,15,127,87,57,0,-71,63,10,127,-38,9,-26,-127,110,48,-127,98,82,21,10,9,-78,12,73,-102,-92,66,106,52,-18,-72,70,-11,80,53,-48,20,127,92,127,-105,-127,-105,-88,24,127, 9,-19,32,40,-59,-2,10,8,-35,127,27,10,9,32,-66,80,-36,-13,-91,-35,-95,57,-72,-9,3,44,45,23,86,93,18,-95,12,-61,-12,69,-51,-35,15,-9,-9,127,58,30,-53,112,22,-27,60,-127,-108,-21,77,-28,-117,72,57,-30,-46,44,23,-127,-51,127,119,-28,83,-117,-12,11,-13,-5,-51,-127,19,0,-35,-32,-127,61,-64,-33,-13,105,-55,20,-25,15,21,11,-103,5,-38,127,127,10, 
  /* [0][2][][] */ 64,-75,51,45,-10,81,-10,42,-111,-6,8,-73,35,-108,18,70,-57,1,18,127,21,15,-7,-50,-4,-25,-58,-23,-92,15,-9,-44,-2,56,-29,53,70,-52,4,-50,5,51,13,-76,-80,-108,-39,-41,-80,41,31,54,-99,33,-4,-92,-84,-3,78,42,-42,126,58,-18,-24,14,-66,-24,7,-55,-31,17,-127,53,55,-59,-96,-87,-6,-47,20,-26,-21,-57,-88,81,70,-59,-11,-17,-32,-40,33,16,23,-63, -105,53,127,78,119,117,-65,29,-127,-33,78,-120,127,-42,-92,26,-13,118,-96,-82,50,-40,28,-105,104,-77,-28,19,-20,-11,-8,-16,-48,75,10,-79,56,-35,4,-85,-62,14,-127,-25,-57,-123,-95,-107,-51,-39,57,101,26,-21,-55,-53,-6,127,43,-27,4,-115,84,48,-86,17,-7,54,127,-29,38,104,-83,-4,23,-96,-55,-127,32,18,-5,-127,-16,-124,-37,127,-26,-43,81,53,-38,-37,45,13,26,-36, 35,60,88,-47,-3,60,-63,45,-29,89,72,-103,14,-104,12,49,-102,97,-102,39,-25,55,-69,-13,-18,-81,-44,-28,-7,48,-34,-73,-11,53,-34,-12,113,-63,4,-42,6,19,10,-62,-30,127,-19,-31,-75,-42,-22,9,-60,21,34,-127,19,-5,23,27,24,111,-7,44,93,-6,17,-9,22,-65,-23,127,-29,-56,68,-68,-112,17,41,-78,1,-47,-19,-41,-127,63,-33,1,-12,25,-61,-27,41,73,27,-58, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.012410648167133331, 0.0095514729619026184, 0.0051363939419388771, 0.010665958747267723, 0.0065788822248578072, 0.013218697160482407, 0.013087081722915173, 0.013563885353505611, 0.0077093932777643204, 0.0083553409203886986, 0.0044983765110373497, 0.0206149872392416, 0.013671820983290672, 0.0036385711282491684, 0.0036577749997377396, 0.0064124311320483685, 0.0052634277381002903, 0.0050101857632398605, 0.0092484867200255394, 0.0063676317222416401, 0.0039943656884133816, 0.011597136966884136, 0.0076984353363513947, 0.019471248611807823, 0.02712184377014637, 0.0086718089878559113, 0.013215681537985802, 0.004678280558437109, 0.0052704242989420891, 0.0036600467283278704, 0.017082883045077324, 0.0091305812820792198, 0.0086512845009565353, 0.0040459833107888699, 0.01348921749740839, 0.0069056539796292782, 0.0080540282651782036, 0.0067057055421173573, 0.0091668702661991119, 0.0038678385317325592, 0.0099812690168619156, 0.0068108201958239079, 0.005691231694072485, 0.01049523614346981, 0.0032882227096706629, 0.0043184035457670689, 0.0074599599465727806, 0.0035160984843969345, 0.0046576852910220623, 0.0039235330186784267, 0.0046368404291570187, 0.0042747920379042625, 0.0079641044139862061, 0.0054764961823821068, 0.0073355752974748611, 0.0060223094187676907, 0.0076232282444834709, 0.0089411353692412376, 0.0077111581340432167, 0.0034766141325235367, 0.0044810413382947445, 0.008737931028008461, 0.0046775122173130512, 0.0025074796285480261, 0.0088875154033303261, 0.011569352820515633, 0.024761632084846497, 0.0076939756982028484, 0.010100578889250755, 0.012391209602355957, 0.0074455584399402142, 0.0051607615314424038, 0.006918945349752903, 0.006925004068762064, 0.0073050642386078835, 0.0039730197750031948, 0.0065391254611313343, 0.0047724307514727116, 0.0039585456252098083, 0.0058048148639500141, 0.0083407750353217125, 0.012311379425227642, 0.0107756108045578, 0.0064947213977575302, 0.0066564958542585373, 0.0067136771976947784, 0.0041702156886458397, 0.0056056510657072067, 0.01429757010191679, 0.0091281402856111526, 0.0031108821276575327, 0.0066086514852941036, 0.0077406554482877254, 0.010885735973715782, 0.0066895307973027229, 0.014603852294385433, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant7_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[96] = { 17272, 2014, 1440, -1727, 4423, 4901, 9844, 1750, 2044, 7574, 1038, -5253, 11849, 3250, 862, 56, 10001, 3767, -2988, -975, 2948, 7269, 5248, -3119, -1950, -2000, 17065, 53, 3885, 1154, 15817, -1202, 4205, 6132, 6775, -5352, 13, -4233, 2146, 790, 3203, 1096, 1217, -221, 1224, 1827, 2565, 3364, 4221, 1985, 4195, 2832, -2448, 2367, 1388, 1646, 2882, 2126, 3273, 129, -394, 1783, 4404, 2192, 4263, 7644, -7596, 873, 2972, -2191, 2823, 1658, 1148, 1664, 2622, 659, -1315, 2137, 2751, 384, 2702, 8358, 5549, 610, 1195, 2007, 368, 236, 16811, -233, 1447, -332, 4835, 2250, -1549, -1242, };
const TfArray<96, float> quant13_scale = { 96, { 5.9025816881330684e-05, 0.00018532919057179242, 0.00021002549328841269, 0.0001680085260886699, 0.00018823114805854857, 0.00015479481953661889, 0.00010455594747327268, 0.00020021405362058431, 0.00011065610306104645, 0.00010679000843083486, 0.00018689058197196573, 0.00014446265413425863, 6.6863809479400516e-05, 0.00015338404045905918, 0.00016541662625968456, 0.0002899848623201251, 8.6430343799293041e-05, 0.0001790892711142078, 0.00010926347022177652, 0.00018954092229250818, 0.00016100969514809549, 0.00011274827556917444, 0.00014738658501300961, 0.00012692839663941413, 0.00024083755852188915, 0.00016843866615090519, 6.1163096688687801e-05, 0.00028900499455630779, 0.00014063256094232202, 0.00020858334028162062, 6.4024316088762134e-05, 0.00018915292457677424, 0.00018413877114653587, 0.00010474718146724626, 0.00010275797103531659, 0.00013021785707678646, 0.00028039806056767702, 0.00015853722288738936, 0.00010901545465458184, 0.00022814584372099489, 0.00015776987129356712, 0.00023855618201196194, 0.00024778259103186429, 0.0002257034502690658, 0.00017919087258633226, 0.00015483553579542786, 0.00017357720935251564, 0.00011774613813031465, 0.00013948057312518358, 0.00020534044597297907, 0.00016403655172325671, 0.00016251152555923909, 0.00016375452105421573, 0.00017027041758410633, 0.00019615353085100651, 0.00016831900575198233, 0.00015767237346153706, 0.00017534349171910435, 0.00020174305245745927, 0.00024044702877290547, 0.00029431699658744037, 0.00016290378698613495, 0.00013842112093698233, 0.00020823202794417739, 0.00013723150186706334, 0.00010417115117888898, 0.00011751410056604072, 0.00023539229005109519, 0.00018159247701987624, 0.00020223432511556894, 0.00022483854263555259, 0.00019454269204288721, 0.00025181373348459601, 0.00023449216678272933, 0.00021085150365252048, 0.00017153169028460979, 0.00014571199426427484, 0.00020965182920917869, 0.00015843394794501364, 0.00029858466587029397, 0.00020027952268719673, 8.6120271589607e-05, 0.0001247918262379244, 0.00016678219253662974, 0.00027228496037423611, 0.0001564595295349136, 0.00016644364222884178, 0.00040889153024181724, 6.097253572079353e-05, 0.00023038014478515834, 0.00019242768757976592, 0.00024728372227400541, 0.00015669678396079689, 0.00018638971960172057, 0.00016882186173461378, 0.00015372487541753799, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data14[96*1*1*16] = { 
  /* [0][0][][] */ -12,-28,-13,-26,-68,-85,-11,-127,-10,-98,62,-63,25,-102,69,-37, 
  /* [1][0][][] */ -41,52,-127,37,-29,47,76,27,-8,-5,57,-20,31,112,-46,116, 
  /* [2][0][][] */ -43,-7,-27,-39,-33,-16,15,-22,-61,82,2,2,2,106,8,127, 
  /* [3][0][][] */ -98,-118,78,-16,-76,30,-94,-50,-3,4,-2,-127,-40,-59,-101,-34, 
  /* [4][0][][] */ -7,-13,47,4,-13,12,-127,88,-21,17,-31,5,11,-25,-46,-26, 
  /* [5][0][][] */ -43,69,-64,-15,10,-76,23,-67,38,-26,21,7,42,-93,-127,-76, 
  /* [6][0][][] */ -38,-41,-11,-10,-61,45,24,-16,-22,-110,98,-52,33,-25,-127,-13, 
  /* [7][0][][] */ 43,22,106,-14,53,127,18,-64,63,68,-96,-92,19,19,-11,-17, 
  /* [8][0][][] */ -114,-99,83,-69,-55,-49,12,94,-127,17,-70,-63,104,111,55,-30, 
  /* [9][0][][] */ 98,64,25,31,-59,2,-22,-127,43,-13,74,13,-84,-46,-40,2, 
  /* [10][0][][] */ 10,-33,-31,-111,-41,28,16,56,-66,-97,26,-32,-70,12,-127,37, 
  /* [11][0][][] */ 9,-60,20,23,-34,-52,30,2,127,57,-12,47,0,-45,-1,56, 
  /* [12][0][][] */ -122,-78,127,91,48,22,34,49,127,-62,28,40,-49,-32,-120,99, 
  /* [13][0][][] */ 39,22,-44,-14,-2,6,127,26,-105,-44,13,52,27,105,105,-73, 
  /* [14][0][][] */ 89,-64,110,-33,-11,23,89,-15,91,84,28,32,127,19,12,-64, 
  /* [15][0][][] */ 39,127,-17,-12,20,64,-60,28,-34,-79,-24,23,-42,44,-30,-49, 
  /* [16][0][][] */ -95,67,113,-103,66,114,-36,22,-16,26,-30,-14,45,-23,34,127, 
  /* [17][0][][] */ 31,50,2,-35,68,-111,89,-17,-72,-36,-10,105,-127,-5,49,-9, 
  /* [18][0][][] */ 19,5,-116,-72,85,75,26,-39,44,99,127,105,-64,123,-23,14, 
  /* [19][0][][] */ 106,104,66,98,32,-43,17,-18,-19,127,58,99,60,48,12,24, 
  /* [20][0][][] */ 36,-51,49,54,-3,35,-31,89,-37,-61,-127,-10,93,-30,32,-32, 
  /* [21][0][][] */ -127,-67,-27,2,-69,-109,-89,22,110,-19,95,37,30,-16,-21,40, 
  /* [22][0][][] */ 45,15,-105,-25,127,13,-6,62,-13,-8,37,71,-29,21,-21,-7, 
  /* [23][0][][] */ -87,3,14,78,57,54,90,127,-56,68,-64,-7,-29,41,-53,-37, 
  /* [24][0][][] */ 35,-83,48,-31,77,8,71,-81,70,44,30,-21,-127,-33,-2,-75, 
  /* [25][0][][] */ 121,14,51,55,54,94,-35,52,53,-56,-78,-1,127,-101,84,-5, 
  /* [26][0][][] */ 55,62,107,127,90,-8,-41,-76,1,7,-9,63,4,-90,-16,-53, 
  /* [27][0][][] */ -60,39,-45,6,3,57,41,-42,9,-27,83,-41,-1,-14,8,127, 
  /* [28][0][][] */ -12,23,-91,-127,-9,-100,10,-39,-106,118,-76,42,54,55,9,69, 
  /* [29][0][][] */ 108,56,-108,44,23,40,45,7,66,33,20,57,-127,38,-25,44, 
  /* [30][0][][] */ -29,88,-70,-127,117,-89,7,53,-89,82,-95,-95,98,30,-105,120, 
  /* [31][0][][] */ 61,-88,127,73,78,4,-45,46,-61,20,-27,-118,-39,53,-34,67, 
  /* [32][0][][] */ -17,57,-17,19,-34,102,21,31,25,-127,-10,-70,-15,8,13,15, 
  /* [33][0][][] */ -99,-21,126,55,31,-9,-82,44,12,-54,-31,-63,-27,-60,4,127, 
  /* [34][0][][] */ 27,61,-127,-94,66,13,-3,29,22,25,-4,-15,-90,-3,-95,105, 
  /* [35][0][][] */ 97,14,-12,-40,-6,-11,-63,-73,-31,-127,-8,36,10,23,50,-56, 
  /* [36][0][][] */ 19,15,-101,15,-8,127,-13,20,32,35,-3,-7,21,25,-46,7, 
  /* [37][0][][] */ 91,49,55,-19,18,-127,33,-46,-55,83,-45,-31,-15,15,88,26, 
  /* [38][0][][] */ -30,127,12,-75,75,21,77,-88,14,-28,-46,61,-127,-108,-94,2, 
  /* [39][0][][] */ 39,51,-90,-93,18,-20,-19,6,49,6,23,-27,-12,-13,-127,-49, 
  /* [40][0][][] */ 2,45,-127,-56,-77,35,42,-108,74,22,27,19,-10,47,46,27, 
  /* [41][0][][] */ -91,-115,32,62,-30,-34,-73,41,6,7,16,-127,-25,-35,2,-9, 
  /* [42][0][][] */ 30,90,-37,-127,-23,-24,33,-46,12,-40,-3,43,42,7,28,32, 
  /* [43][0][][] */ 2,31,3,30,127,-33,8,29,-19,20,-8,-118,-90,-23,-24,4, 
  /* [44][0][][] */ 65,-50,76,108,38,69,-38,94,34,-11,-46,-56,127,-32,-76,-28, 
  /* [45][0][][] */ 96,22,-110,-12,-21,-127,-45,-19,23,-59,54,-39,-109,26,-9,-67, 
  /* [46][0][][] */ -110,-81,51,29,0,-97,-58,5,54,-67,67,-4,98,54,32,127, 
  /* [47][0][][] */ -86,-98,127,122,-7,-18,39,46,58,14,-114,-93,38,-8,-61,35, 
  /* [48][0][][] */ -67,62,-17,22,32,49,-73,-116,64,-25,42,-104,41,-127,-40,-18, 
  /* [49][0][][] */ -20,43,57,7,3,-3,127,94,-30,-59,-26,29,-46,-4,-90,46, 
  /* [50][0][][] */ 26,4,-78,80,61,-127,-26,52,-115,14,-28,28,67,-55,-60,-2, 
  /* [51][0][][] */ -11,117,-76,127,-45,52,-37,-111,-51,-102,44,-48,-29,58,-65,106, 
  /* [52][0][][] */ -127,-4,57,32,41,-42,31,11,46,-56,-38,-33,-59,-44,-57,-39, 
  /* [53][0][][] */ -66,-62,-19,-127,7,-5,-13,111,64,-49,-38,5,-55,-11,3,104, 
  /* [54][0][][] */ -10,-44,-19,-35,-26,2,127,12,16,-44,98,6,-80,-33,-107,78, 
  /* [55][0][][] */ -11,-49,-54,-15,88,-19,102,127,-45,-86,-89,-30,41,1,-39,92, 
  /* [56][0][][] */ 22,-94,-127,-75,-122,63,-79,58,-94,-86,-14,-9,115,83,-30,57, 
  /* [57][0][][] */ 3,80,7,-14,127,51,24,62,-33,102,-54,-41,-2,19,-106,-73, 
  /* [58][0][][] */ 59,31,-16,27,9,3,-5,-39,6,-127,-49,-9,-76,-13,-33,27, 
  /* [59][0][][] */ -7,54,-81,-21,-13,-8,-54,-50,-21,127,-9,-23,-70,35,-17,29, 
  /* [60][0][][] */ 11,-20,-24,22,-127,-21,10,1,0,25,4,29,35,-22,43,27, 
  /* [61][0][][] */ 78,37,-60,39,12,-25,-127,-94,-14,-13,12,27,69,-94,113,28, 
  /* [62][0][][] */ 60,57,-17,-77,-26,2,66,88,-117,127,44,60,38,31,48,98, 
  /* [63][0][][] */ -17,-127,18,-63,-36,-4,52,-19,-15,-14,8,-6,-53,116,39,36, 
  /* [64][0][][] */ 47,-28,-127,-112,-19,47,40,-55,39,-118,50,-47,-21,-38,-74,64, 
  /* [65][0][][] */ -38,-33,66,-22,127,-42,27,71,-7,27,-104,-66,41,25,-68,-40, 
  /* [66][0][][] */ -77,-127,11,-4,-57,-52,36,0,75,-5,40,59,-27,-2,-1,68, 
  /* [67][0][][] */ 50,-51,-86,31,-20,121,6,-127,-30,-99,-109,-116,-35,-76,28,-66, 
  /* [68][0][][] */ 48,14,-14,17,-25,-19,-51,-41,-93,-127,-10,5,52,-43,67,-15, 
  /* [69][0][][] */ 15,-44,41,-20,-22,-48,-8,7,45,127,-5,-12,3,29,62,12, 
  /* [70][0][][] */ 3,15,-58,5,-101,-30,-17,-69,28,127,27,16,83,-66,-4,43, 
  /* [71][0][][] */ 110,-30,19,0,-3,100,95,-22,127,64,-34,1,23,-10,-50,-57, 
  /* [72][0][][] */ -9,-51,78,127,9,10,-68,60,14,62,-8,-13,-7,19,-51,41, 
  /* [73][0][][] */ -10,-41,16,-48,57,17,24,127,-12,94,-20,1,13,10,8,-27, 
  /* [74][0][][] */ -7,-16,-4,-30,-107,-127,15,102,-76,-40,16,-9,46,-24,-11,108, 
  /* [75][0][][] */ 48,127,-76,-9,47,104,-63,-86,34,12,21,67,-113,7,32,23, 
  /* [76][0][][] */ -27,-37,-42,-24,-71,-48,97,-7,22,31,127,78,-45,-63,-3,87, 
  /* [77][0][][] */ -18,127,-28,-6,-61,-114,-18,63,-9,-111,-70,52,-108,17,0,127, 
  /* [78][0][][] */ 127,-11,-32,86,-123,19,-118,-73,75,36,-42,22,-11,-55,37,67, 
  /* [79][0][][] */ -65,1,40,-23,-38,-127,10,-38,13,5,78,-4,-5,63,-37,117, 
  /* [80][0][][] */ 77,30,-6,-29,25,39,127,-47,29,0,21,28,66,18,10,-29, 
  /* [81][0][][] */ -5,-111,62,-46,20,92,8,118,127,78,34,-78,-35,44,-89,-35, 
  /* [82][0][][] */ 71,82,46,23,72,20,-2,-11,-54,127,-120,35,57,-116,47,-124, 
  /* [83][0][][] */ -7,32,8,90,32,119,100,118,127,59,-29,-84,-74,80,-5,-99, 
  /* [84][0][][] */ 39,-44,9,37,71,-38,-19,4,-40,116,-62,-54,-127,59,-65,-119, 
  /* [85][0][][] */ -25,127,-41,-42,26,26,0,17,21,1,14,-40,-123,-106,-112,-12, 
  /* [86][0][][] */ -41,30,86,127,86,-4,53,60,16,17,-72,-35,55,36,-71,-66, 
  /* [87][0][][] */ -38,48,127,-17,-47,10,-25,17,35,-9,-32,12,-53,-26,-10,-28, 
  /* [88][0][][] */ 16,14,-47,54,25,-27,-15,13,-66,-55,-114,-43,127,-47,-2,-8, 
  /* [89][0][][] */ 55,28,-26,-110,15,-76,-25,71,117,-13,73,-127,-31,-36,21,-24, 
  /* [90][0][][] */ -41,55,46,28,-25,-1,28,127,27,-99,-33,102,53,-6,-62,108, 
  /* [91][0][][] */ -6,39,-1,57,58,61,-60,-127,-46,-3,-25,13,-2,-84,-15,-72, 
  /* [92][0][][] */ -46,66,-3,-42,-100,24,-81,101,-28,62,53,119,9,-127,70,-15, 
  /* [93][0][][] */ 113,58,127,102,-57,-70,23,28,-65,-74,-80,-97,10,-31,-48,-1, 
  /* [94][0][][] */ -41,-127,1,-101,-13,1,-10,14,56,-8,11,35,12,76,-23,67, 
  /* [95][0][][] */ -22,-37,-47,-7,108,127,-23,12,78,1,-48,27,-67,107,-49,81, 
};
const TfArray<96, float> quant14_scale = { 96, { 0.00064474873943254352, 0.0020243814215064049, 0.002294143196195364, 0.0018351849867030978, 0.0020560799166560173, 0.0016908494289964437, 0.0011420819209888577, 0.0021869712509214878, 0.0012087149079889059, 0.0011664849007502198, 0.0020414367318153381, 0.0015779894310981035, 0.00073036446701735258, 0.0016754391836002469, 0.0018068731296807528, 0.0031675526406615973, 0.00094409292796626687, 0.0019562216475605965, 0.0011935029178857803, 0.0020703868940472603, 0.001758735510520637, 0.001231568050570786, 0.0016099280910566449, 0.0013864599168300629, 0.0026307085063308477, 0.0018398833926767111, 0.00066809460986405611, 0.0031568494159728289, 0.0015361526748165488, 0.0022783903405070305, 0.00069934816565364599, 0.0020661486778408289, 0.0020113782957196236, 0.0011441707611083984, 0.0011224423069506884, 0.0014223911566659808, 0.0030628342647105455, 0.0017317283200100064, 0.0011907938169315457, 0.0024920748546719551, 0.0017233464168384671, 0.0026057886425405741, 0.0027065703179687262, 0.0024653961881995201, 0.0019573315512388945, 0.0016912941355258226, 0.0018960125744342804, 0.0012861605500802398, 0.0015235693426802754, 0.0022429677192121744, 0.0017917983932420611, 0.0017751402920112014, 0.001788717694580555, 0.00185989192686975, 0.002142617478966713, 0.0018385763978585601, 0.0017222813330590725, 0.0019153059693053365, 0.0022036726586520672, 0.0026264425832778215, 0.0032148731406778097, 0.0017794249579310417, 0.0015119968447834253, 0.0022745528258383274, 0.001499002450145781, 0.0011378787457942963, 0.0012836259556934237, 0.0025712288916110992, 0.001983564579859376, 0.0022090389393270016, 0.002455948619171977, 0.0021250220015645027, 0.0027506030164659023, 0.00256139668636024, 0.0023031658492982388, 0.0018736689817160368, 0.001591636217199266, 0.0022900616750121117, 0.0017306002555415034, 0.0032614897936582565, 0.0021876862738281488, 0.00094070594059303403, 0.0013631217880174518, 0.0018217895412817597, 0.0029742137994617224, 0.0017090333858504891, 0.0018180913757532835, 0.0044663897715508938, 0.00066601310390979052, 0.0025164803955703974, 0.0021019193809479475, 0.0027011209167540073, 0.0017116249073296785, 0.0020359656773507595, 0.0018440691055729985, 0.0016791622620075941, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data15[16] = { -31313, -14713, 11887, -20345, -4801, -17659, 18360, -15132, 5056, -15417, 16246, 11011, -7907, -24213, 4065, 14117, };
const TfArray<16, float> quant15_scale = { 16, { 5.3741838200949132e-05, 3.9290585846174508e-05, 5.0303482566960156e-05, 6.2982944655232131e-05, 6.9827474362682551e-05, 0.00011667396756820381, 5.3277854021871462e-05, 6.2551123846787959e-05, 8.9659093646332622e-05, 0.00010046899114968255, 8.3166429249104112e-05, 6.4481115259695798e-05, 7.542037928942591e-05, 0.00010121775267180055, 6.6980872361455113e-05, 6.3797553593758494e-05, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*1*1*96] = { 
  /* [0][0][][] */ 19,-11,21,4,-56,-42,7,-6,-6,-69,28,-6,33,-52,77,38,-65,-34,48,18,65,20,-49,32,16,48,122,50,-46,59,43,-26,19,11,10,-21,23,39,-36,0,127,-12,66,-14,24,18,35,-4,37,-33,73,-7,-58,40,76,17,-5,-18,40,35,28,75,-51,-13,34,9,16,10,-5,-19,21,30,15,73,12,32,65,-20,36,38,-4,35,49,14,-28,31,-4,51,43,4,-31,36,34,44,81,61, 
  /* [1][0][][] */ 45,1,-27,-42,-63,-51,104,-94,-24,-59,-21,-80,-9,-53,27,-10,-11,20,-8,-4,-36,-55,104,-53,37,36,34,31,-85,-7,-62,8,-23,22,31,-35,-8,49,-117,109,58,4,25,-94,89,-33,25,75,-63,-23,24,-119,-30,82,105,14,-5,21,-42,28,-28,50,-4,-14,43,59,111,-10,-65,-127,22,0,39,55,6,47,-23,-14,82,24,23,-26,71,-76,5,-23,-9,3,22,-36,50,21,81,14,-39,31, 
  /* [2][0][][] */ 0,0,1,-30,75,42,-48,52,-52,30,-19,-22,-42,8,-41,30,25,-19,-113,-38,-16,-47,-24,48,38,-41,-64,32,-31,-27,5,106,-85,-51,-20,41,-8,47,-14,-39,51,2,-8,9,26,116,7,-28,-86,10,-57,50,-9,14,48,-80,70,-3,47,0,-14,-49,-31,57,9,-6,-99,19,-19,-39,-10,4,-15,73,-1,47,-50,15,-33,-28,-13,50,16,2,-50,-56,8,-57,-21,-13,17,127,-7,-19,87,-44, 
  /* [3][0][][] */ 48,-26,-4,-127,-48,-20,124,-3,26,86,-37,-16,21,15,-22,69,51,39,-4,5,-39,16,37,-24,7,68,-13,-20,-84,-4,-69,66,3,-20,8,-16,20,-40,-33,65,11,-21,-6,29,85,-22,3,74,27,-22,18,-15,73,102,88,-7,47,-8,-1,-41,-17,32,71,12,-12,-7,99,-33,23,-8,-35,-4,33,-19,-1,-85,15,-6,93,32,-41,-56,-5,-44,-24,-13,76,51,-3,22,2,25,3,-81,0,23, 
  /* [4][0][][] */ -51,57,67,-26,-69,2,-35,-68,59,-52,9,-30,53,53,15,39,-24,-93,-29,-76,16,-29,-54,-9,-42,-23,26,19,-71,127,-62,-51,27,-12,27,29,3,67,-69,37,43,7,20,5,3,-30,78,32,10,-37,-32,-51,-101,87,29,37,53,98,-14,-13,-47,-67,8,15,67,-2,8,11,4,-9,5,-53,3,84,78,84,-26,9,23,78,-8,50,78,-40,75,-112,-29,-59,-26,-39,-12,-1,-3,-21,77,-14, 
  /* [5][0][][] */ -26,-18,35,-48,-20,-9,0,-24,51,17,-27,0,-36,-30,41,-35,-21,-44,-58,-47,-13,28,-31,51,40,-38,69,-1,-66,17,25,67,-23,-55,29,33,-53,3,-48,-1,-15,16,6,38,62,20,-65,43,-24,25,9,0,21,-32,-4,-17,-15,-10,50,-49,47,1,2,32,-41,-32,110,-2,-1,-30,35,22,-6,5,45,-10,20,-6,127,78,-23,0,-21,45,49,37,-6,94,1,-10,4,30,7,-5,-18,36, 
  /* [6][0][][] */ 5,-22,33,7,-41,115,-40,-127,-46,-23,-60,71,-6,29,-126,83,29,-14,-15,-49,-72,-58,-55,-100,-10,-56,-10,66,-125,73,-15,-30,40,76,-12,-45,-9,-34,53,-15,-73,76,-8,12,-25,59,-75,-20,24,19,-32,-104,51,39,-21,3,-12,-23,69,32,-41,-98,4,-32,29,-97,8,-66,-38,8,39,-127,-61,-60,38,-106,77,3,-45,46,5,103,-31,-32,73,-15,-17,32,-91,52,-110,28,23,-45,69,-9, 
  /* [7][0][][] */ 8,-15,-64,59,-19,-18,20,-3,-49,12,63,51,51,-19,15,-25,20,51,-20,-33,-61,6,16,-21,45,36,10,53,63,30,-8,32,-66,-99,24,37,41,-22,-76,-7,-33,17,-10,-112,51,92,109,47,-42,29,-109,-30,3,9,110,-71,-48,-32,-101,21,-15,-37,1,-58,34,-22,98,24,-47,-30,97,-17,-19,11,-108,3,60,-10,127,-11,-58,-12,-85,9,46,37,-53,32,-5,6,3,13,86,-18,80,-41, 
  /* [8][0][][] */ -4,-39,22,-27,16,47,6,24,-2,14,34,63,-19,25,-59,-15,65,6,37,-3,2,-77,-44,-26,-3,-47,46,15,-14,44,25,-12,-16,23,-1,40,-70,28,52,-36,20,19,26,13,37,49,38,6,48,26,83,42,32,-12,-33,40,21,116,-14,14,2,-127,-22,27,-64,-39,-63,4,82,1,17,-14,-23,-93,49,-107,-9,33,-92,-6,-22,-12,24,42,47,-41,-42,35,-21,106,28,27,-39,-8,36,-30, 
  /* [9][0][][] */ -12,-22,-2,-12,6,35,29,80,-54,15,46,81,-42,37,-26,-49,-18,14,-6,-23,10,45,-20,53,-20,9,-2,19,-4,-1,39,-1,-10,-18,2,80,-44,39,25,-10,13,-32,14,1,51,39,11,58,-3,28,-32,61,127,-31,37,-10,6,19,45,26,7,-8,99,29,33,6,15,6,48,-42,-61,62,5,-67,-15,-105,-20,7,12,-3,-27,27,47,-29,38,21,-36,16,24,101,53,51,48,41,10,27, 
  /* [10][0][][] */ 21,53,10,-3,-23,24,-40,3,19,-7,3,14,32,12,-10,-48,-19,46,34,8,48,-32,-5,-65,19,7,-86,45,47,42,-14,21,15,30,-2,-28,28,-7,29,-11,22,-8,42,-21,-34,-23,9,-6,18,36,23,-13,-3,8,-50,42,-21,-15,-4,28,-36,-40,19,6,-11,15,-91,-24,-10,-10,65,-35,-47,6,19,-10,17,-18,-113,15,-19,34,-19,-19,-31,42,-58,-127,-33,27,-2,30,51,-27,0,55, 
  /* [11][0][][] */ -15,-16,0,16,-20,6,31,15,52,-2,0,-30,-8,20,-12,7,-18,53,12,-56,33,26,15,-36,5,1,45,6,57,-22,-36,30,-2,81,-54,-11,22,-4,108,-9,-53,20,-15,18,-45,11,-22,3,21,-48,13,-16,-37,8,-127,121,-42,3,-5,-33,8,-17,8,-63,-30,-14,-109,-32,34,3,-44,1,35,-18,6,-32,16,14,-54,-43,-13,9,-19,1,-32,7,47,36,-17,-24,5,6,-5,-1,56,47, 
  /* [12][0][][] */ 59,32,-7,-45,0,-10,24,84,13,-32,24,0,-25,12,-15,43,-13,27,-14,25,7,92,0,34,8,-25,-127,4,100,-21,21,23,-5,-37,11,-40,54,-17,27,31,-27,-47,68,6,59,-19,23,-17,-78,5,-51,94,72,-28,39,-52,-10,6,-13,-36,19,74,49,14,-37,44,-18,42,84,27,23,19,30,-1,-18,-24,-32,-33,2,-27,21,-31,10,-82,-8,29,32,-113,8,16,18,16,14,101,1,27, 
  /* [13][0][][] */ -15,10,-60,37,12,16,-47,-29,13,39,16,16,5,2,67,-40,56,36,32,54,-38,-58,30,-9,51,43,-24,30,33,31,26,-6,-19,42,-14,3,39,-49,-40,-39,-20,8,-15,-4,1,39,-21,5,-49,50,-5,3,-15,8,40,7,4,-58,1,32,-1,11,12,-36,2,66,127,8,32,11,-1,-40,-7,59,-79,44,18,-38,104,-9,-48,-34,-26,18,18,52,-27,-15,5,-33,6,9,41,-11,54,23, 
  /* [14][0][][] */ -25,28,2,14,-48,-29,13,57,-66,-30,47,-13,-96,-39,51,-24,-33,62,-82,51,5,33,-127,42,-48,-22,-46,-55,33,-17,42,85,-46,13,8,-24,-7,-27,32,-58,19,-49,47,-38,-22,34,-76,-11,-28,-69,76,29,-30,3,-48,19,-63,58,-42,8,75,79,-33,19,0,-45,-16,-46,10,91,33,27,-31,32,-9,-28,5,-43,49,8,-45,85,-18,-107,39,-15,-8,9,-101,-3,-16,-10,-34,0,51,-1, 
  /* [15][0][][] */ 42,-11,4,51,61,-43,-32,-3,-4,6,-29,-34,100,53,-27,-18,6,0,-43,65,-14,-48,16,-10,16,-19,75,19,106,-20,-54,46,65,19,-11,-99,58,17,80,41,45,33,-57,-4,-75,-105,4,-46,-31,-15,5,-13,-43,-64,-57,84,-16,-15,-51,35,-32,-48,-20,24,21,65,-63,36,1,-13,1,-20,-4,-127,-62,-86,-29,10,-92,11,70,-27,27,33,-53,3,-12,-15,11,57,-18,-92,-45,-78,3,-54, 
};
const TfArray<16, float> quant16_scale = { 16, { 0.0022840281017124653, 0.0016698498511686921, 0.002137898001819849, 0.0026767749805003405, 0.0029676675330847502, 0.0049586435779929161, 0.0022643087431788445, 0.0026584225706756115, 0.0038105114363133907, 0.0042699319310486317, 0.0035345731303095818, 0.0027404474094510078, 0.0032053659670054913, 0.004301754292100668, 0.0028466871008276939, 0.0027113959658890963, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[96] = { 6839, -7538, -11697, 4356, -946, -4331, 1971, 6725, 9572, -5980, -1446, -4400, -1222, -3904, 5046, -6480, -656, -200, -5894, 3712, -4093, 505, -1827, -194, 132, 18482, -5274, -3059, 2449, -6188, -1892, -5359, 14247, -1770, 4795, -885, 1613, 8817, 1375, 10686, 2539, 3769, -1403, -217, 5661, 356, 12786, 5229, -5232, -377, 753, -395, -434, -2702, -2713, 2753, 4642, 7969, -1840, 13219, 2692, 1872, -2360, 14004, 22770, -14, 14853, 831, -2403, -4245, 1579, -1114, -119, 3369, -6510, 287, 18846, 4676, 7994, 15427, 7468, -1181, -3753, 10553, 3608, -999, 10147, -3056, 4946, 1913, -6908, 1775, -797, -2101, 6361, -6695, };
const TfArray<96, float> quant17_scale = { 96, { 8.5260406194720417e-05, 0.00016326045442838222, 7.6002987043466419e-05, 0.00027155652060173452, 0.00031382215092889965, 0.00046220916556194425, 0.0001956988126039505, 0.00019723283185157925, 0.00016891695850063115, 0.00010028827819041908, 0.00029961869586259127, 0.00014023957191966474, 0.00027400796534493566, 0.00011046120198443532, 0.00017369366833008826, 0.00014691699470859021, 0.00023735282593406737, 0.0003410892968531698, 9.6142524853348732e-05, 0.00034703614073805511, 0.00020515987125691026, 0.00028377302805893123, 0.0001748122158460319, 0.00012458466517273337, 0.0005043954006396234, 5.613166285911575e-05, 0.00026761137996800244, 0.0001914692111313343, 0.00040593818994238973, 0.00012073424295522273, 0.00017764318909030408, 0.00021300949447322637, 7.974884647410363e-05, 0.00023100711405277252, 0.00017052509065251797, 0.00021516703418456018, 0.00041585674625821412, 7.8486489655915648e-05, 0.00043031846871599555, 8.8774802861735225e-05, 0.00058357726084068418, 0.00015952384273987263, 0.0002220683527411893, 0.00016767783381510526, 0.00014564125740434974, 0.00033503572922199965, 0.00012939676526002586, 0.00022049779363442212, 0.00014010031009092927, 0.00022881018230691552, 0.00026775087462738156, 0.00018284731777384877, 0.00019904467626474798, 0.00028679755632765591, 0.00033043048460967839, 0.00025292721693404019, 0.00010473374277353287, 0.00029819065821357071, 0.00025582732632756233, 0.00012821155542042106, 0.00013081342331133783, 0.00029033661121502519, 0.00014261640899349004, 5.6563279940746725e-05, 0.00016689168114680797, 0.00054726627422496676, 0.00012526522914413363, 7.6207412348594517e-05, 0.00021334529446903616, 0.00027832976775243878, 0.00018214859301224351, 0.00027928510098718107, 0.0011075343936681747, 0.00016497939941473305, 0.00011723821080522612, 0.00020539498655125499, 5.1075006922474131e-05, 0.00010475247108843178, 0.0001606769219506532, 0.00013253231009002775, 0.00011465400893939659, 0.00020581531862262636, 0.00017066142754629254, 0.00019279148546047509, 7.4303417932242155e-05, 0.00031219041557051241, 0.0001135179991251789, 0.00018760826787911355, 0.00015182867355179042, 0.00015237153274938464, 0.00012878696725238115, 0.00024878594558686018, 0.00036473834188655019, 0.00014589601778425276, 0.00016507871623616666, 0.00027108733775094151, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data18[1*3*3*96] = { 
  /* [0][0][][] */ -127,5,-31,-6,38,3,24,-23,-35,-104,-29,0,-19,-4,-40,-36,-44,46,-127,-25,4,17,-27,74,4,-42,-3,-42,39,22,31,39,-58,8,-56,-46,-48,-16,-6,-19,-13,-27,65,-10,-69,58,-50,-4,-11,7,-26,78,-54,-11,53,-30,-47,-23,9,-81,-57,-18,84,-18,-64,-50,-88,20,-55,35,39,34,18,-13,2,-39,-65,8,127,23,-121,45,-78,-7,-91,-15,2,97,-87,50,-8,-76,-2,56,50,17, -105,44,78,-40,-46,-9,127,-98,-35,-94,-22,-89,-17,9,-126,29,0,126,-51,-35,-39,127,-45,127,54,-50,58,27,127,49,127,-6,-103,-25,-84,4,-31,-39,127,-72,-40,-109,-21,26,113,-31,-35,-4,24,-9,45,126,-66,0,-65,9,-65,20,-5,-2,-58,-127,-88,-127,-84,-25,-6,-58,-81,58,-51,127,-127,-44,69,-37,-102,-53,9,-9,-34,40,11,-41,127,42,-83,127,-127,-49,-22,-41,-20,116,60,-63, -118,24,1,-58,46,-22,34,-127,-60,-40,-10,94,28,-28,-74,13,-8,1,-71,-52,-35,-19,-42,125,12,49,-14,-72,42,11,82,27,-11,-4,-1,75,-4,-33,-1,-49,-16,27,50,-41,-32,-31,-20,-28,14,55,9,127,63,52,5,-29,54,-16,-4,-51,-32,-22,-66,40,-58,-45,127,42,-35,-1,80,42,-36,-42,40,13,-7,61,-51,58,-127,-8,-112,-2,51,-53,35,-107,-17,-64,-19,21,33,102,4,42, 
  /* [0][1][][] */ 30,24,44,-15,28,116,-43,-36,-24,-42,-21,24,11,29,-38,45,-35,26,-7,23,48,-28,127,59,16,24,47,19,-57,-42,-11,13,-42,10,15,-68,-2,-110,-60,-7,-16,-20,95,-3,-116,127,-127,-76,36,83,-35,-41,-94,89,61,-38,-20,-49,65,-76,-9,-59,97,-95,-109,4,-18,0,-1,-16,20,-7,21,127,4,-37,-127,-127,-34,-111,-11,7,37,-88,-54,54,-127,-31,-56,127,127,-95,127,21,39,-21, 71,127,120,127,-127,-127,71,-66,127,60,-51,-50,-40,127,-56,103,127,-127,120,127,127,-41,5,-44,-127,-127,127,127,-108,127,-17,127,-127,127,43,-84,127,79,6,-13,127,45,-127,-76,127,-48,54,80,127,-127,127,-91,43,127,-127,127,-127,127,-127,127,-100,78,34,-123,97,127,-30,127,-112,-102,-42,-110,9,45,127,48,-15,2,68,-127,64,127,127,127,124,44,-58,92,-125,46,-28,-36,-77,-15,-118,-3, -118,12,68,-40,54,84,-81,-29,-60,-12,-7,127,-12,0,3,33,-50,24,109,-6,1,-28,-41,13,16,-12,-13,-35,-56,-34,11,13,-45,-10,52,127,5,-79,-69,-127,-21,-19,57,20,-98,-72,-68,-127,21,88,-41,-18,127,64,97,-66,75,-41,41,-96,-2,-69,-127,-39,-78,29,-81,12,18,-6,-127,0,15,-87,-1,127,-9,46,-57,-47,-23,-95,11,-94,-50,52,-67,64,117,-108,72,127,-45,-5,-127,23, 
  /* [0][2][][] */ 105,-20,62,-61,20,5,-9,-11,-5,86,19,30,127,25,-17,-42,-2,-40,-46,-45,12,-49,13,-86,-20,-8,-43,26,-14,22,-27,26,93,27,-40,-59,-15,-59,-21,29,-23,24,47,68,-17,9,-61,-46,-51,37,-49,-70,-3,-73,58,-18,-34,-45,31,-87,-12,36,52,-118,-87,-15,125,58,62,70,38,-35,-16,13,-18,-13,-65,-63,-15,-94,23,14,27,-67,-68,14,5,-81,-61,-10,17,-27,-14,-47,58,24, 27,-31,127,14,1,24,35,106,-65,127,127,-31,-19,49,127,127,34,-30,3,-82,24,-26,108,-66,-15,-29,42,7,-8,72,-72,-27,-60,-5,-127,-6,-85,-81,59,-66,-30,-127,-32,127,49,-80,-49,-11,0,-40,-12,-50,16,-68,-61,-22,-65,-69,84,-69,127,62,88,-101,-127,-38,-10,2,127,127,37,7,44,-40,43,-15,-19,-90,-10,-16,9,-24,43,-46,70,-127,-25,-49,8,-7,16,-4,-7,-127,-32,127, 14,14,55,-20,30,29,-51,-32,-38,58,29,48,38,7,-4,-32,40,-12,-29,-52,4,-7,23,-76,-30,-81,-59,32,-28,48,-20,10,-37,26,-25,49,-10,-127,-19,-83,-46,-7,-68,67,-35,25,-67,-51,0,-48,-75,-61,-13,-52,96,-9,44,-42,77,-37,20,65,-44,-92,14,8,-35,45,80,16,-66,-29,-70,-13,4,-9,1,-19,75,-89,-85,11,48,-47,-63,29,37,-14,48,-43,13,24,11,-20,-51,5, 
};
const TfArray<96, float> quant18_scale = { 96, { 0.0036235670559108257, 0.0069385692477226257, 0.0032301268074661493, 0.011541152372956276, 0.01333744078874588, 0.019643889740109444, 0.0083171995356678963, 0.0083823949098587036, 0.0071789706125855446, 0.0042622517794370651, 0.012733794748783112, 0.0059601818211376667, 0.011645338498055935, 0.0046946010552346706, 0.0073819807730615139, 0.0062439721077680588, 0.010087494738399982, 0.014496294781565666, 0.0040860571898519993, 0.014749035239219666, 0.0087192943319678307, 0.01206035353243351, 0.0074295192025601864, 0.00529484823346138, 0.021436803042888641, 0.0023855955805629492, 0.011373483575880527, 0.0081374412402510643, 0.017252372577786446, 0.005131205078214407, 0.0075498353689908981, 0.0090529033914208412, 0.003389325924217701, 0.0098178023472428322, 0.0072473161853849888, 0.0091445986181497574, 0.017673911526799202, 0.0033356756903231144, 0.018288534134626389, 0.0037729290779680014, 0.024802032858133316, 0.0067797629162669182, 0.0094379046931862831, 0.0071263080462813377, 0.0061897533014416695, 0.014239017851650715, 0.0054993624798953533, 0.0093711558729410172, 0.0059542632661759853, 0.0097244326025247574, 0.01137941237539053, 0.0077710109762847424, 0.0084593985229730606, 0.012188895605504513, 0.014043294824659824, 0.010749407112598419, 0.0044511840678751469, 0.012673103250563145, 0.010872661136090755, 0.0054489909671247005, 0.0055595701560378075, 0.012339305132627487, 0.0060611972585320473, 0.002403939375653863, 0.0070928963832557201, 0.023258816450834274, 0.0053237723186612129, 0.0032388148829340935, 0.0090671749785542488, 0.011829014867544174, 0.0077413148246705532, 0.011869616806507111, 0.047070208936929703, 0.0070116245187819004, 0.0049826237373054028, 0.0087292864918708801, 0.0021706877741962671, 0.0044519798830151558, 0.0068287691101431847, 0.0056326230987906456, 0.0048727951943874359, 0.0087471511214971542, 0.007253110408782959, 0.0081936381757259369, 0.0031578950583934784, 0.013268092647194862, 0.0048245149664580822, 0.0079733515158295631, 0.0064527187496423721, 0.0064757899381220341, 0.0054734461009502411, 0.010573402978479862, 0.015501379035413265, 0.0062005803920328617, 0.0070158452726900578, 0.011521211825311184, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant7_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[96] = { 2024, 14737, -109, 2271, 3143, 28759, -1770, 2764, 8906, 365, 14036, 707, 459, 388, 4225, -51, 3654, 6344, -333, 4967, 1221, 4747, -707, 466, -4951, 246, 1907, 3493, 6881, 1257, 3306, 3068, 2436, 9117, 5433, 7267, 2362, 878, 7691, 1566, 21203, 808, 2167, 597, 3915, 12394, 2828, 11236, 957, -227, 2794, 13705, 2659, -2619, 3842, -72, 874, 7493, -1416, 3501, 2425, 8416, 2716, -1402, 16722, 16715, 849, 6805, 11780, 3559, 2010, 747, -5820, 2122, 1003, 4339, -166, 6796, 3393, 6767, 977, 1682, 5634, 9448, 468, 2987, 6739, 875, -2685, 1730, 3370, 7360, 3630, 1771, 2799, 6828, };
const TfArray<96, float> quant19_scale = { 96, { 0.000203530173166655, 6.5078682382591069e-05, 0.00019673646602313966, 0.00020950725593138486, 0.0002101161953760311, 3.5506014683051035e-05, 0.00015774939674884081, 0.00013154983753338456, 9.3912982265464962e-05, 0.0002402605750830844, 6.9333611463662237e-05, 0.00030754631734453142, 0.00038361555198207498, 0.00044203895959071815, 0.00015971777611412108, 0.00029861539951525629, 0.00014694253331981599, 0.0001226178283104673, 0.00027056669932790101, 0.00012643364607356489, 0.00018319307127967477, 0.00011553637159522623, 0.00036787980934605002, 0.00023793497530277818, 0.00012193505972390994, 0.00023985399457160383, 0.00020034884801134467, 0.00013603856496047229, 0.00011551747593330219, 0.00018673643353395164, 0.00018798213568516076, 0.00016266138118226081, 0.00019968887499999255, 9.1315007011871785e-05, 0.00010257048415951431, 9.8024800536222756e-05, 0.0002227266231784597, 0.00027168734231963754, 8.7699510913807899e-05, 0.00014984345762059093, 5.1414048357401043e-05, 0.0002539414563216269, 0.000161715317517519, 0.00020347253303043544, 0.00012419452832546085, 7.6086012995801866e-05, 0.00020997680258005857, 7.5484400440473109e-05, 0.00028224635752849281, 0.00027275830507278442, 0.0001887167600216344, 6.3958454120438546e-05, 0.00016755746037233621, 0.00013895533629693091, 0.00011322552018100396, 0.00042138839489780366, 0.00019929982954636216, 0.00012839424016419798, 0.00023951435287017375, 0.00012433735537342727, 0.00016980711370706558, 9.4080278358887881e-05, 0.00018316440400667489, 0.00015762189286760986, 6.5299129346385598e-05, 5.9489884733920917e-05, 0.00023251115635503083, 0.00010161638056160882, 8.4872895968146622e-05, 0.0001623220305191353, 0.00021044496679678559, 0.00017864884284790605, 0.00013515049067791551, 0.00019831792451441288, 0.00017959643446374685, 0.00011678795999614522, 0.00024161323381122202, 9.5795177912805229e-05, 0.00018984221969731152, 0.00013734165986534208, 0.00020383727678563446, 0.00016550123109482229, 0.00013288587797433138, 9.0750691015273333e-05, 0.0001546932035125792, 0.00021618635219056159, 0.00010537472553551197, 0.00027559339650906622, 0.00016953093290794641, 0.00026900536613538861, 0.00012350383622106165, 9.8835807875730097e-05, 0.0001322323369095102, 0.00017940221005119383, 0.00018809680477716029, 9.0651621576398611e-05, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data20[96*1*1*16] = { 
  /* [0][0][][] */ -28,-8,18,53,-79,-11,54,127,-2,90,9,35,-22,23,19,88, 
  /* [1][0][][] */ -32,23,-41,-32,127,105,-76,-65,39,42,-109,-11,-76,5,-80,-103, 
  /* [2][0][][] */ -12,86,65,-27,56,53,1,52,47,29,31,-34,5,-127,-23,-4, 
  /* [3][0][][] */ 127,-8,9,31,54,-2,-36,-17,82,51,-43,-32,-60,33,-54,35, 
  /* [4][0][][] */ -96,-85,9,-23,-109,-21,-76,-11,-23,-50,52,-36,1,11,18,127, 
  /* [5][0][][] */ -107,-58,1,29,127,12,63,28,-117,-48,9,66,-22,113,-32,18, 
  /* [6][0][][] */ -127,-17,-22,32,48,-50,47,70,-7,-21,-67,78,12,-24,-68,15, 
  /* [7][0][][] */ -11,63,112,-122,86,1,127,123,31,28,-45,-12,50,-23,-105,-13, 
  /* [8][0][][] */ -49,-24,-77,69,-71,48,10,-42,-30,-18,52,27,107,127,-59,6, 
  /* [9][0][][] */ -44,-127,-15,45,-7,-40,0,62,32,25,-3,49,-41,7,-14,3, 
  /* [10][0][][] */ -46,-28,-104,11,-79,127,42,-93,-6,8,74,-64,39,113,-98,36, 
  /* [11][0][][] */ 13,-127,-18,57,-11,33,37,-66,-38,-30,14,-71,18,61,-8,93, 
  /* [12][0][][] */ -60,-45,-31,-10,-45,-17,3,127,33,35,23,89,-20,-11,25,-27, 
  /* [13][0][][] */ -56,-26,-31,22,-18,6,29,-3,-10,127,-16,-41,25,36,9,-27, 
  /* [14][0][][] */ -114,-13,-45,-73,-26,90,43,-54,28,-127,102,-34,53,-78,-103,14, 
  /* [15][0][][] */ 72,-59,41,-77,-77,-63,23,68,-14,-3,-82,-31,127,-16,-92,-95, 
  /* [16][0][][] */ -49,-67,42,-21,63,4,-78,-51,118,-127,-17,-52,-3,-25,-60,-98, 
  /* [17][0][][] */ -64,17,52,-74,-1,14,-58,-24,77,23,-17,-5,42,-67,-7,-127, 
  /* [18][0][][] */ 67,12,0,-121,22,-95,69,-19,47,73,2,95,-16,17,-20,-127, 
  /* [19][0][][] */ -15,-32,38,-39,5,53,-38,46,70,8,-32,-127,-16,-32,-50,-2, 
  /* [20][0][][] */ 76,117,63,-127,26,-9,-39,44,-85,-117,81,-51,-46,82,-40,-40, 
  /* [21][0][][] */ -34,-113,-54,21,53,18,21,36,-127,-25,-69,34,98,-32,58,102, 
  /* [22][0][][] */ 11,-10,44,-50,-43,13,33,36,-1,68,38,39,-33,10,127,6, 
  /* [23][0][][] */ -96,-35,-38,78,0,84,51,-127,-83,-11,-17,-122,44,109,45,72, 
  /* [24][0][][] */ 25,13,-18,6,-37,-69,30,-95,36,127,-65,21,29,-38,87,-95, 
  /* [25][0][][] */ 88,-69,67,113,61,-18,-8,101,-127,47,67,-55,-7,55,37,1, 
  /* [26][0][][] */ -9,8,7,55,-54,122,20,42,-83,-74,-49,26,7,20,22,-127, 
  /* [27][0][][] */ 27,32,-29,-96,-56,12,-90,-44,-99,-11,-83,-61,-108,39,-31,127, 
  /* [28][0][][] */ -18,41,-4,-40,0,13,-127,-43,12,-1,6,-36,-19,-34,-23,-22, 
  /* [29][0][][] */ 2,-94,-17,57,-40,-2,127,-12,88,41,-95,62,27,-24,-52,59, 
  /* [30][0][][] */ 33,-104,-112,28,-91,20,21,-57,-18,39,-59,-51,-68,127,-6,106, 
  /* [31][0][][] */ -127,-46,30,85,2,-11,-98,-29,13,-12,-20,-81,-44,-54,19,47, 
  /* [32][0][][] */ -118,-101,-62,4,-127,-33,34,-15,97,34,-7,-33,4,72,58,-19, 
  /* [33][0][][] */ 27,1,-70,108,-127,-85,57,2,-84,2,-51,-42,-3,94,72,45, 
  /* [34][0][][] */ 88,127,69,23,-92,-108,-65,-45,101,-91,2,-18,-65,-100,29,37, 
  /* [35][0][][] */ 86,43,-127,108,-112,31,104,-77,64,30,-3,-81,68,85,-20,25, 
  /* [36][0][][] */ 47,13,-26,22,127,-10,8,11,-36,40,-87,-81,-16,-17,-24,12, 
  /* [37][0][][] */ -127,-7,1,-57,35,-69,-18,47,-28,-9,-14,84,29,-2,3,-25, 
  /* [38][0][][] */ 20,98,23,-87,-78,-72,-127,-77,15,8,-3,38,-24,-59,37,-30, 
  /* [39][0][][] */ -9,-46,-15,66,49,49,82,-1,-122,1,50,5,-22,127,20,89, 
  /* [40][0][][] */ 83,53,44,84,-59,-55,51,17,-127,2,-59,-14,-52,-35,63,5, 
  /* [41][0][][] */ 16,13,21,19,-102,75,19,39,-50,34,-79,22,31,17,4,-127, 
  /* [42][0][][] */ 8,-62,28,-25,127,45,21,27,9,-42,-79,-1,-61,3,-41,49, 
  /* [43][0][][] */ 40,5,-32,-46,65,13,86,96,-34,-31,-50,-27,106,-32,-127,0, 
  /* [44][0][][] */ -27,-85,-67,-127,27,44,38,44,-44,-69,-38,116,33,73,39,120, 
  /* [45][0][][] */ 30,-11,-58,18,-107,19,2,-127,40,-12,83,-24,18,33,-3,46, 
  /* [46][0][][] */ 94,-26,-50,-17,127,-65,-50,89,2,-15,48,11,-98,-52,-37,-108, 
  /* [47][0][][] */ -112,-122,-14,58,2,73,36,47,-2,37,53,108,-18,48,27,127, 
  /* [48][0][][] */ 65,-1,-87,-71,12,-80,24,77,45,-97,30,35,-74,13,-27,-127, 
  /* [49][0][][] */ 7,-27,50,28,24,-97,-7,28,-46,79,-55,-8,-58,-54,78,127, 
  /* [50][0][][] */ 5,-4,-11,19,-127,-42,-3,-40,27,11,19,26,-21,-42,23,7, 
  /* [51][0][][] */ 50,7,-53,-124,-104,30,39,-100,-50,7,68,-3,62,127,73,80, 
  /* [52][0][][] */ -4,-60,-30,-69,114,-93,-5,25,43,-72,105,-95,-2,-17,1,127, 
  /* [53][0][][] */ -30,-29,19,-2,-52,-40,-61,-127,47,98,-52,79,-62,-53,10,-111, 
  /* [54][0][][] */ 127,75,2,-58,-66,-53,-73,-81,-41,-15,71,27,-5,-47,44,-4, 
  /* [55][0][][] */ 26,-3,17,77,-15,-1,21,-27,50,127,8,35,-10,5,-5,28, 
  /* [56][0][][] */ 77,-25,-63,127,-29,17,13,58,15,3,70,69,59,16,28,67, 
  /* [57][0][][] */ -11,10,37,-105,41,-2,28,47,13,-11,12,127,28,-26,113,1, 
  /* [58][0][][] */ 127,-57,-10,-15,74,15,31,53,-9,0,-21,84,53,-2,12,-21, 
  /* [59][0][][] */ 13,61,51,-47,-24,-98,-1,43,-26,59,-93,-127,-88,-87,-30,-50, 
  /* [60][0][][] */ 127,15,-5,-18,-35,-8,48,-56,-39,71,-26,65,24,-49,-99,-109, 
  /* [61][0][][] */ 22,66,32,-87,-110,-127,-26,-54,-77,11,32,13,-73,-63,102,59, 
  /* [62][0][][] */ -33,99,-27,33,-22,111,-77,17,-33,80,-94,42,-53,41,43,-127, 
  /* [63][0][][] */ 58,-3,-59,-103,-72,-78,58,1,37,-50,-21,127,0,41,63,-28, 
  /* [64][0][][] */ -8,2,8,19,42,-86,12,19,-127,-51,-51,-70,-27,63,39,37, 
  /* [65][0][][] */ -28,4,12,-31,121,96,-10,-81,-69,-9,-28,-60,-101,76,-127,13, 
  /* [66][0][][] */ 43,67,-32,32,-83,127,-50,6,-42,50,-32,26,-48,32,39,-108, 
  /* [67][0][][] */ 4,9,-69,-41,-18,-105,127,-127,-45,10,57,125,-85,26,33,-80, 
  /* [68][0][][] */ 79,-112,16,127,46,-36,12,82,50,43,35,16,-19,2,-68,-51, 
  /* [69][0][][] */ 14,66,53,-31,6,-13,-29,-1,78,38,-1,30,59,-78,35,-127, 
  /* [70][0][][] */ 27,-19,82,15,98,-28,-76,-33,-127,-118,-43,47,15,35,-51,13, 
  /* [71][0][][] */ -46,-73,30,8,67,-17,3,-17,-103,46,-127,-13,22,37,36,40, 
  /* [72][0][][] */ 24,-28,88,-51,-47,-78,-127,-17,0,89,-85,108,79,86,-108,-30, 
  /* [73][0][][] */ -15,-19,-32,-42,16,-127,57,-20,16,113,124,-28,49,-38,-83,86, 
  /* [74][0][][] */ 36,-5,-57,100,-101,-73,105,11,44,17,-5,34,127,17,-32,4, 
  /* [75][0][][] */ -17,36,-72,63,-47,123,37,49,-114,3,28,102,34,127,61,-7, 
  /* [76][0][][] */ -37,102,-55,38,-73,38,-16,-10,43,29,-3,-36,-11,-18,-127,-7, 
  /* [77][0][][] */ 125,127,-112,62,57,110,117,17,46,57,96,8,88,32,22,15, 
  /* [78][0][][] */ -3,-45,16,-73,53,-127,16,-46,39,39,75,-29,-27,-16,-7,106, 
  /* [79][0][][] */ -24,34,23,15,11,-33,6,20,-127,-6,32,26,110,16,-69,-25, 
  /* [80][0][][] */ -54,-37,81,81,127,-7,56,-91,-94,45,-37,-77,-24,-41,43,100, 
  /* [81][0][][] */ 112,86,-53,0,-1,-53,62,127,-113,95,-6,-22,-74,26,86,76, 
  /* [82][0][][] */ 24,100,-36,-127,1,-94,37,-27,34,-5,-28,22,-20,3,95,20, 
  /* [83][0][][] */ 3,-20,18,53,-31,-5,7,-52,43,-52,53,71,76,-57,-28,-127, 
  /* [84][0][][] */ -84,-62,-66,-13,-41,52,83,35,43,-4,119,127,61,84,-32,27, 
  /* [85][0][][] */ 55,-2,63,-116,27,10,-30,58,54,124,-34,7,-34,97,127,18, 
  /* [86][0][][] */ -87,79,-37,-66,18,127,34,-9,68,70,123,-1,-63,54,-1,-14, 
  /* [87][0][][] */ 24,-65,36,-27,61,-127,19,-24,40,10,75,-25,14,-23,-42,73, 
  /* [88][0][][] */ 10,71,-19,-28,46,-5,40,-20,-18,-18,91,-26,55,68,30,-127, 
  /* [89][0][][] */ -6,61,-19,-11,-21,127,-7,26,-57,58,-15,29,-21,61,11,-70, 
  /* [90][0][][] */ 33,-86,28,53,98,-10,40,9,-13,-127,-78,-25,0,-24,-40,27, 
  /* [91][0][][] */ -6,45,98,15,1,-58,-89,34,-36,22,-90,-126,-33,-127,39,28, 
  /* [92][0][][] */ 60,17,70,27,-122,-127,14,-18,-49,39,-15,-22,14,-86,58,-71, 
  /* [93][0][][] */ -17,-127,-56,82,-23,-36,7,43,-4,-2,-41,42,-3,47,38,15, 
  /* [94][0][][] */ 104,50,59,-71,48,0,-28,26,34,127,33,14,-61,3,68,-22, 
  /* [95][0][][] */ -94,-22,1,-14,119,16,0,76,-9,-21,-127,-100,18,-25,-107,29, 
};
const TfArray<96, float> quant20_scale = { 96, { 0.0033916272222995758, 0.0010844712378457189, 0.0032784168142825365, 0.0034912293776869774, 0.0035013766027987003, 0.00059167231665924191, 0.0026287361979484558, 0.002192146610468626, 0.0015649660490453243, 0.0040037026628851891, 0.0011553753865882754, 0.0051249521784484386, 0.0063925702124834061, 0.00736613804474473, 0.002661537379026413, 0.0049761277623474598, 0.0024486505426466465, 0.0020433038007467985, 0.004508723970502615, 0.0021068905480206013, 0.0030527296476066113, 0.0019252982456237078, 0.0061303498223423958, 0.0039649489335715771, 0.0020319260656833649, 0.0039969272911548615, 0.0033386135473847389, 0.0022669469472020864, 0.0019249834585934877, 0.0031117761973291636, 0.0031325346790254116, 0.0027105894405394793, 0.0033276157919317484, 0.001521673402749002, 0.0017092347843572497, 0.0016334854299202561, 0.0037115167360752821, 0.0045273983851075172, 0.0014614248648285866, 0.0024969915393739939, 0.00085676379967480898, 0.0042316806502640247, 0.0026948242448270321, 0.0033906665630638599, 0.0020695778075605631, 0.0012678974308073521, 0.0034990538842976093, 0.0012578722089529037, 0.0047033536247909069, 0.0045452448539435863, 0.0031447764486074448, 0.0010658038081601262, 0.0027921777218580246, 0.0023155519738793373, 0.0018867902690544724, 0.0070220171473920345, 0.0033211326226592064, 0.0021395618095993996, 0.0039912676438689232, 0.0020719578023999929, 0.0028296660166233778, 0.0015677539631724358, 0.0030522518791258335, 0.0026266116183251143, 0.0010881448397412896, 0.00099133956246078014, 0.0038745664060115814, 0.0016933355946093798, 0.0014143220614641905, 0.0027049346826970577, 0.0035068553406745195, 0.0029770047403872013, 0.0022521479986608028, 0.003304770216345787, 0.0029927953146398067, 0.0019461547490209341, 0.0040262434631586075, 0.0015963310142979026, 0.0031635311897844076, 0.0022886616643518209, 0.0033967448398470879, 0.0027579127345234156, 0.00221441057510674, 0.0015122697222977877, 0.002577807754278183, 0.003602529875934124, 0.0017559645930305123, 0.0045924889855086803, 0.0028250638861209154, 0.0044827060773968697, 0.0020580680575221777, 0.001647000084631145, 0.0022035199217498302, 0.0029895587358623743, 0.0031344455201178789, 0.0015106188366189599, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[16] = { -7307, 9886, -9949, 4293, 9254, -15716, -36848, -8081, -6445, 2258, -14502, -3323, 6662, -6565, 1949, -931, };
const TfArray<16, float> quant21_scale = { 16, { 9.7761076176539063e-05, 0.00010306028707418591, 8.4382721979636699e-05, 0.00010100383951794356, 9.0978326625190675e-05, 7.9105833719950169e-05, 7.7330543717835099e-05, 0.00011992354120593518, 8.4284598415251821e-05, 0.00010129115980817005, 0.0001039539129124023, 9.1358175268396735e-05, 0.00010788879444589838, 8.0286299635190517e-05, 9.1959162091370672e-05, 0.00012192608119221404, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data22[16*1*1*48] = { 
  /* [0][0][][] */ 20,94,43,-50,127,44,-61,64,-17,125,-6,67,-80,42,-59,40,50,95,14,-65,-82,77,15,32,75,48,74,84,-56,-48,16,92,-14,46,-87,42,48,-124,-36,-25,33,5,82,19,23,-61,-43,-21, 
  /* [1][0][][] */ -39,36,-70,-70,-14,66,-75,9,-13,-43,-73,43,74,-44,-41,-4,-35,-35,-21,35,-94,66,-114,-82,-28,-40,61,57,-29,-14,50,-60,35,-38,-60,66,17,-47,127,-40,-14,41,-37,-2,8,39,51,29, 
  /* [2][0][][] */ -9,-14,84,-53,-36,-104,23,8,111,87,-97,15,81,-35,127,70,-80,-53,-37,41,62,-110,-41,-76,10,-20,7,-66,25,52,-53,1,1,-35,48,15,-93,-4,-10,-10,10,50,37,-32,-5,-73,75,-79, 
  /* [3][0][][] */ 68,-17,-17,-25,51,105,27,-20,55,-63,2,-20,-40,12,18,40,-36,-56,24,-127,-22,9,-30,-28,-25,82,120,34,-7,-39,35,56,76,-37,90,30,-46,-44,-21,35,46,12,-32,8,37,35,-31,-14, 
  /* [4][0][][] */ 127,-15,39,-24,78,38,22,4,85,-3,-93,24,26,-13,48,-3,-99,-105,-63,-88,-3,36,-57,-30,-51,104,-95,115,-61,-22,39,84,18,-51,-16,-30,16,28,-43,0,-8,-8,-29,68,-72,104,-25,-38, 
  /* [5][0][][] */ -1,-26,-75,-6,-35,102,27,9,63,62,63,86,95,-53,36,0,-7,127,6,48,7,-9,-59,-35,32,-22,-71,-83,-1,35,20,-8,-35,-17,39,-12,-60,-12,-77,2,100,-28,44,28,-39,23,-55,9, 
  /* [6][0][][] */ 45,-16,17,109,29,4,125,-18,28,72,119,42,-16,106,-53,66,40,-41,-72,71,79,-76,12,84,-86,81,76,6,121,-3,-76,20,85,-62,-69,-38,46,0,36,33,17,32,73,-44,119,127,-2,-27, 
  /* [7][0][][] */ -89,-33,-19,13,-53,-32,48,37,57,127,-49,-77,-81,20,18,-8,-91,91,-33,87,-28,44,11,16,-5,-67,-69,-97,12,52,-5,27,-44,7,8,-33,-16,-42,108,10,8,24,8,-13,28,88,-30,-10, 
  /* [8][0][][] */ -6,-96,69,-62,34,-63,62,-62,13,-123,20,23,-50,13,39,20,11,8,-27,112,-3,11,-10,34,76,11,-47,-24,-61,-19,-42,-127,25,-53,1,58,-33,28,101,21,-6,16,42,105,1,-73,-38,61, 
  /* [9][0][][] */ 57,-34,44,-55,51,104,-38,42,57,-35,-24,-31,5,0,127,-26,23,-107,10,55,-61,18,81,-12,-58,-80,-44,69,96,62,-28,-30,-88,59,-7,117,-45,-32,-49,-30,-40,-2,5,107,91,76,-54,10, 
  /* [10][0][][] */ -30,29,-35,4,3,20,-61,-30,26,34,71,23,-33,-19,21,-55,-38,127,8,53,10,-12,6,43,-54,57,6,107,47,17,-29,-18,57,22,7,25,-3,-54,-23,19,-96,11,15,-7,14,42,29,25, 
  /* [11][0][][] */ -42,41,-32,40,-22,73,12,16,9,25,-112,-90,52,9,-52,-55,15,6,-15,-41,0,-30,120,12,34,-21,-25,19,18,0,-56,73,-1,9,-20,-18,12,58,127,54,-3,-26,73,-17,-54,-6,53,-18, 
  /* [12][0][][] */ -52,-4,31,34,-54,-20,21,-10,-18,-22,-104,8,45,-78,6,45,58,70,127,-104,-9,6,-29,-53,-1,-13,27,-27,26,-2,-36,76,50,57,51,-36,-69,-36,44,7,-45,24,29,-16,82,-2,-60,-36, 
  /* [13][0][][] */ -5,-96,-22,-61,23,68,81,54,-99,-1,114,-64,45,32,88,19,127,18,-38,-92,80,-80,97,-7,-68,-16,-39,19,-6,-88,-92,22,16,-12,-33,17,8,-49,60,-50,26,14,65,17,14,-18,60,-68, 
  /* [14][0][][] */ 33,36,-88,-25,-54,41,-76,-33,-35,57,55,42,-10,-61,-8,-52,46,-102,52,9,71,-61,40,14,-50,127,-87,-5,-42,-33,-89,-11,82,53,101,-17,-87,14,-31,82,-20,-49,77,-64,-57,-63,-29,48, 
  /* [15][0][][] */ -43,-10,33,23,115,-17,19,40,9,57,-9,50,56,-12,-8,-3,-12,26,-25,-50,42,-33,-58,-41,38,-71,-68,100,-30,-1,15,8,-76,-6,127,1,-54,12,43,-18,-37,-40,4,5,-43,-27,-23,5, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant22_scale = { 16, { 0.0041548456065356731, 0.0043800622224807739, 0.0035862654913216829, 0.004292663186788559, 0.0038665786851197481, 0.0033619978930801153, 0.0032865481916815042, 0.00509675033390522, 0.0035820954944938421, 0.0043048742227256298, 0.0044180410914123058, 0.0038827224634587765, 0.0045852735638618469, 0.0034121675416827202, 0.0039082644507288933, 0.0051818583160638809, } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data23[48] = { 9196, 2219, 10501, 1147, 19942, -1029, 39129, 1778, 7055, 38112, 72, 20296, 9685, 14043, 19150, 27312, 1837, 4231, -4682, 41421, 877, 22814, 1389, 11909, 9252, 36734, -4284, -6464, 2988, 13309, 17556, 18, 1319, -3918, 2098, 9693, 7216, 32133, 6548, 4627, 25265, 2124, 2264, 8586, 4649, -4426, 63484, 24516, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.1117850893642753e-05, 0.00015223845548462123, 0.00011857106437673792, 0.00013521670189220458, 0.00022652233019471169, 9.5468181825708598e-05, 5.9208708989899606e-05, 0.00014667463256046176, 0.00013858611055184156, 5.7604975154390559e-05, 9.0006644313689321e-05, 7.9554323747288436e-05, 5.6741606385912746e-05, 8.1165904703084379e-05, 7.0071437221486121e-05, 4.8675683501642197e-05, 0.00014735831064172089, 5.4847889259690419e-05, 0.00025109897251240909, 5.4207477660384029e-05, 8.8871056505013257e-05, 5.4808941058581695e-05, 0.00012363852874841541, 7.3973853432107717e-05, 6.9789624831173569e-05, 5.8240460930392146e-05, 0.00010175160423386842, 7.4579351348802447e-05, 0.0003580702468752861, 7.7624346886295825e-05, 7.0742993557360023e-05, 0.00028128369012847543, 0.00021181591728236526, 0.00012810855696443468, 7.9035402450244874e-05, 9.129830141318962e-05, 0.00010214099893346429, 4.112214082852006e-05, 6.1873121012467891e-05, 0.00015609024558216333, 5.05223979416769e-05, 0.00022616471687797457, 0.00021488609490916133, 0.00012385753507260233, 0.00017508375458419323, 5.2906303608324379e-05, 2.3815204258426093e-05, 5.6219010730274022e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data24[1*3*3*48] = { 
  /* [0][0][][] */ -10,-12,-127,110,-109,87,-10,14,-127,-61,38,-37,65,-123,-54,-70,74,45,66,-94,14,-115,78,-112,-65,-82,5,74,-91,-17,-42,94,-15,-83,103,-107,-95,-38,53,18,-51,-54,124,-89,92,91,-44,-71, -52,24,-40,106,-8,94,-32,69,-44,-56,86,-67,127,-127,-35,-61,82,127,127,-118,127,-83,68,-77,-81,-127,91,127,-8,-20,-71,127,39,-127,127,-7,-46,-65,51,-46,-84,127,28,-62,-37,82,-23,-102, -42,-25,15,86,-2,23,-27,44,-1,-63,77,-34,38,-108,24,-37,73,30,37,-127,61,-114,70,-1,-40,-70,42,78,57,-27,-52,80,23,-60,50,7,41,-49,39,26,-82,-18,-18,67,-103,66,-19,-66, 
  /* [0][1][][] */ -59,14,-9,127,-40,86,-82,41,-56,-119,30,-71,59,-54,-10,-116,100,117,-15,-58,35,-42,127,-127,-80,-58,17,51,-127,-5,-100,4,88,37,69,-127,-80,-86,77,-50,-88,-104,127,27,105,46,-56,-120, -127,45,-108,77,-85,127,-127,127,-32,-127,127,-127,124,-29,-54,-60,127,112,-1,-100,66,-127,59,-126,-127,-116,127,95,4,-84,-39,74,127,100,93,-126,-33,-127,127,-127,-127,109,104,-75,-71,127,-113,-127, -77,5,-1,-5,34,76,-101,58,-44,-19,63,-84,48,-40,67,-35,69,74,-2,-30,8,-92,70,-48,-98,-53,83,65,58,-38,-47,31,57,-1,83,-35,10,-17,66,-29,-20,-75,53,13,-127,86,-103,-114, 
  /* [0][2][][] */ -70,87,12,57,-67,25,-98,75,-63,-69,2,-26,-32,-2,-98,-127,47,17,-10,11,25,8,50,16,-25,-31,23,54,-24,-59,-58,5,24,52,97,-12,-127,-61,71,-4,-110,-88,67,-95,85,60,-127,-12, -76,127,-35,70,-127,23,-84,65,-32,-95,35,-29,-2,-50,-127,-89,48,86,-47,-16,34,-68,28,-85,-42,-40,67,29,-4,-127,-127,-13,28,35,100,-35,-71,-5,57,-27,-69,38,53,-127,-46,76,-104,2, -51,21,-20,33,-102,6,-74,-114,-59,-60,20,-17,-24,-32,-44,-60,35,39,-10,28,1,-103,38,4,-9,4,41,28,23,-41,-79,12,-10,-2,69,-9,-42,23,51,28,43,-41,3,-34,-93,64,-107,-33, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0030225084628909826, 0.0064701344817876816, 0.0050392700359225273, 0.0057467096485197544, 0.009627198800444603, 0.0040573976002633572, 0.0025163700338453054, 0.0062336716800928116, 0.0058899093419313431, 0.0024482114240527153, 0.0038252824451774359, 0.003381058806553483, 0.0024115182459354401, 0.0034495508298277855, 0.0029780359473079443, 0.0020687165670096874, 0.0062627280130982399, 0.0023310352116823196, 0.010671705938875675, 0.0023038177751004696, 0.0037770196795463562, 0.0023293800186365843, 0.0052546374499797821, 0.0031438886653631926, 0.0029660591389983892, 0.0024752195458859205, 0.0043244431726634502, 0.0031696225050836802, 0.015217985026538372, 0.0032990346662700176, 0.0030065770260989666, 0.011954556219279766, 0.0090021761134266853, 0.0054446137510240078, 0.0033590046223253012, 0.0038801778573542833, 0.00434099230915308, 0.0017476909561082721, 0.0026296076830476522, 0.0066338353790342808, 0.0021472019143402576, 0.009612000547349453, 0.009132659062743187, 0.0052639450877904892, 0.0074410596862435341, 0.0022485179360955954, 0.0010121461236849427, 0.0023893078323453665, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[48] = { 1344, -2026, 1303, -3279, 9314, -771, 5742, -2677, 1688, 787, 729, 3889, 88, -39, 11, 2642, -3926, 1879, 6598, 262, -661, 2888, -1306, 5009, 1606, 2068, 1062, -1040, 19028, -257, 970, -1603, -2388, 2910, -1305, 2378, 1112, 1032, 11, 3524, 1457, 16596, -4405, 2108, 12199, -98, 2084, 3007, };
const TfArray<48, float> quant25_scale = { 48, { 0.00022108983830548823, 0.00018849194748327136, 0.00023335465812124312, 0.00017172301886603236, 0.00012285923003219068, 0.00025351278600282967, 0.000135262162075378, 0.0002224524796474725, 0.00021461838332470506, 0.00032010438735596836, 0.0003620804927777499, 0.00016908884572330862, 0.00034012793912552297, 0.00043409867794252932, 0.00029983237618580461, 0.00021648059191647917, 0.00016953470185399055, 0.00031772357760928571, 0.00014216991257853806, 0.00030193410930223763, 0.00031767110340297222, 0.0002165239566238597, 0.00023488879378419369, 0.00016978174971882254, 0.00023167766630649567, 0.00025721130077727139, 0.00023217068519443274, 0.00027516594855114818, 5.7157714763889089e-05, 0.00035333665437065065, 0.00029980822000652552, 0.00019153264292981476, 0.00014437678328249604, 0.00019878172315657139, 0.00021576134895440191, 0.00018898241978604347, 0.00029657961567863822, 0.00020398692868184298, 0.00024498190032318234, 0.00018466485198587179, 0.00026733506820164621, 6.8070505221839994e-05, 0.00016393231635447592, 0.00020919038797728717, 8.1844758824445307e-05, 0.00025524996453896165, 0.00026708861696533859, 0.00019881673506461084, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 127,85,126,-33,39,102,-115,-51, 
  /* [1][0][][] */ 5,-125,-127,-20,78,-3,57,15, 
  /* [2][0][][] */ -127,-2,-76,-28,98,58,-92,-95, 
  /* [3][0][][] */ 12,86,127,-86,-1,-80,-6,10, 
  /* [4][0][][] */ -127,6,-17,-38,20,-6,-15,-30, 
  /* [5][0][][] */ -89,56,-64,-9,22,44,-69,-127, 
  /* [6][0][][] */ -13,-88,-127,50,120,-15,0,24, 
  /* [7][0][][] */ -7,-127,-105,-44,-46,-22,-13,61, 
  /* [8][0][][] */ 105,60,-39,-22,127,-107,-108,-9, 
  /* [9][0][][] */ -27,14,-29,47,-41,-47,127,-33, 
  /* [10][0][][] */ 0,127,11,50,108,-34,7,60, 
  /* [11][0][][] */ -126,-53,17,-31,-119,127,123,25, 
  /* [12][0][][] */ 37,49,-127,30,-6,-45,-75,-14, 
  /* [13][0][][] */ 88,-26,-74,12,-13,-127,-69,-26, 
  /* [14][0][][] */ 28,-86,15,5,127,-61,-42,-27, 
  /* [15][0][][] */ -44,-65,-26,101,127,82,-77,10, 
  /* [16][0][][] */ 99,-15,-18,30,118,-116,-127,-21, 
  /* [17][0][][] */ 58,127,44,63,51,62,6,-72, 
  /* [18][0][][] */ 13,-9,8,38,127,16,32,-65, 
  /* [19][0][][] */ 14,113,26,30,-127,-17,25,-1, 
  /* [20][0][][] */ -49,24,37,-116,10,31,-19,127, 
  /* [21][0][][] */ -90,48,61,-127,17,59,-19,93, 
  /* [22][0][][] */ -76,-80,-67,13,-95,127,98,-25, 
  /* [23][0][][] */ 86,14,-127,40,-6,-46,-63,-34, 
  /* [24][0][][] */ -83,62,-6,-10,-53,52,-127,54, 
  /* [25][0][][] */ -71,-31,-127,16,-53,-43,36,102, 
  /* [26][0][][] */ 28,-27,-38,-28,98,-39,127,-53, 
  /* [27][0][][] */ 127,-92,-10,126,37,49,-24,65, 
  /* [28][0][][] */ 82,17,122,-56,127,-97,83,0, 
  /* [29][0][][] */ -18,0,-22,-33,-37,20,127,-47, 
  /* [30][0][][] */ 14,-127,8,-83,-113,28,11,-16, 
  /* [31][0][][] */ 0,31,20,-3,-127,-1,-25,7, 
  /* [32][0][][] */ -3,-69,-39,51,-2,-93,126,-127, 
  /* [33][0][][] */ 76,105,65,47,127,6,-60,-96, 
  /* [34][0][][] */ -117,-50,127,-8,-40,80,116,14, 
  /* [35][0][][] */ -57,34,127,-27,-119,-123,-19,16, 
  /* [36][0][][] */ -127,38,122,-22,17,102,87,-2, 
  /* [37][0][][] */ -17,-108,-46,-124,-51,-127,92,24, 
  /* [38][0][][] */ 27,-29,119,-51,46,95,-127,-2, 
  /* [39][0][][] */ 36,115,-127,-18,-63,-38,6,118, 
  /* [40][0][][] */ 107,-65,-7,89,34,32,6,127, 
  /* [41][0][][] */ -11,77,127,-14,-13,60,-76,-38, 
  /* [42][0][][] */ 26,-127,-103,-10,-77,21,20,-92, 
  /* [43][0][][] */ -25,-127,31,-76,114,-91,55,60, 
  /* [44][0][][] */ -13,98,103,-3,-31,84,-127,39, 
  /* [45][0][][] */ -21,56,19,77,-94,59,-127,5, 
  /* [46][0][][] */ -20,-50,36,39,-127,-82,-1,2, 
  /* [47][0][][] */ -46,41,8,-61,-127,6,-11,75, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0020816614851355553, 0.0017747374949976802, 0.0021971403621137142, 0.0016168503789231181, 0.001156775513663888, 0.002386938314884901, 0.0012735548662021756, 0.0020944913849234581, 0.0020207297056913376, 0.0030139284208416939, 0.0034091526176780462, 0.0015920484438538551, 0.0032024593092501163, 0.0040872367098927498, 0.002823058282956481, 0.0020382632501423359, 0.0015962463803589344, 0.0029915121849626303, 0.0013385944766923785, 0.0028428470250219107, 0.0029910181183367968, 0.0020386716350913048, 0.0022115849424153566, 0.0015985724749043584, 0.0021813507191836834, 0.0024217613972723484, 0.0021859926637262106, 0.0025908127427101135, 0.00053816591389477253, 0.0033268255647271872, 0.0028228308074176311, 0.001803367049433291, 0.0013593730982393026, 0.0018716204212978482, 0.0020314913708716631, 0.001779355457983911, 0.0027924319729208946, 0.001920629758387804, 0.0023066161666065454, 0.0017387036932632327, 0.002517081331461668, 0.00064091477543115616, 0.0015434973174706101, 0.0019696226809173822, 0.00077060563489794731, 0.0024032946676015854, 0.0025147609412670135, 0.0018719501094892621, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data27[8] = { -3974, -4062, 22801, -4072, -1368, -13552, 6436, -4614, };
const TfArray<1, int> tensor_dimension27 = { 1, { 8 } };
const TfArray<8, float> quant27_scale = { 8, { 7.1077149186749011e-05, 9.6120042144320905e-05, 0.00012678997882176191, 8.2683160144370049e-05, 6.4205349190160632e-05, 0.00011433350300649181, 8.3800332504324615e-05, 7.7580873039551079e-05, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data28[8*1*1*48] = { 
  /* [0][0][][] */ 10,-60,-1,-127,-7,24,86,86,-83,-88,-34,51,-39,-13,-39,35,-43,18,-26,93,33,-6,47,103,86,58,52,16,-76,-28,-41,-47,-34,85,11,-70,10,-27,87,15,6,23,-3,-66,3,-44,23,-50, 
  /* [1][0][][] */ -35,40,0,-1,-68,6,-10,-50,-42,56,8,3,37,40,-53,-1,-11,-65,97,-2,127,27,-54,12,51,-1,-64,24,44,14,44,25,-21,14,62,-38,5,104,-19,-51,71,16,-7,-3,106,14,-31,54, 
  /* [2][0][][] */ -36,-39,90,28,61,-52,-12,14,-44,-14,9,45,-26,-36,-47,-127,-47,-83,-2,44,-85,32,-38,-50,-66,21,-23,-42,-34,10,-39,-25,-13,2,32,-14,43,-6,-67,-10,44,-35,32,-38,-31,-63,-58,-54, 
  /* [3][0][][] */ 63,-4,84,-35,2,-21,38,101,-72,-32,18,-35,-71,55,-21,51,61,35,-59,2,-111,-29,127,-17,27,-15,-26,-65,-22,73,100,-44,31,-86,-47,21,-10,-109,16,68,-77,-21,35,-1,-111,-66,65,-25, 
  /* [4][0][][] */ 47,-35,83,-52,16,-10,25,17,-66,-28,-46,-1,46,-80,43,-97,59,37,-6,-68,36,76,20,38,26,22,105,-3,55,23,-127,18,5,-35,23,-17,21,-14,55,10,-37,-11,-120,42,-34,-94,16,42, 
  /* [5][0][][] */ -6,-30,55,57,26,8,31,20,-59,12,-17,4,34,-13,0,-26,49,83,5,-38,72,-41,127,-105,-52,24,-27,34,8,-2,-35,-53,-26,-20,-37,50,46,19,44,7,-33,21,44,15,65,-11,60,2, 
  /* [6][0][][] */ -28,14,-127,103,49,-6,11,1,-5,-8,58,-46,-87,-51,-41,37,-117,4,-10,61,15,65,-101,-82,-27,-20,29,60,-20,-10,-32,-12,18,42,-16,1,-18,1,34,25,69,45,-84,-84,-14,112,-56,-63, 
  /* [7][0][][] */ 26,33,-109,-11,-8,78,127,92,19,32,-93,-4,-110,39,-42,-62,12,13,110,91,53,-14,95,5,84,88,-83,89,-83,19,-10,-84,15,-69,-9,7,52,115,-33,77,-49,55,-12,-63,59,-42,58,-36, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant28_scale = { 8, { 0.003020778764039278, 0.0040851016528904438, 0.0053885742090642452, 0.0035140342079102993, 0.0027287271805107594, 0.0048591736704111099, 0.003561513964086771, 0.0032971871551126242, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data29[48] = { -8110, 5168, -1504, 3130, 934, -4742, -2618, -2017, -4072, 2313, 4580, -2502, 578, -1388, 689, 4134, 17695, 4659, 1665, -7010, -9234, 430, 11662, -1854, -884, 2140, 9070, -3907, -5791, -6303, -3442, 9890, 9094, 2852, 8811, -1250, -69, -322, 8603, 10033, 2474, -4053, 5430, 2093, -2080, 19325, 2185, -1516, };
const TfArray<48, float> quant29_scale = { 48, { 0.00019275140948593616, 0.0001341889874311164, 0.00064581644255667925, 0.00029875841573812068, 0.00015640816127415746, 0.00014812957670073956, 0.00025462624034844339, 0.0003971034602727741, 0.00014664186164736748, 0.00017388108244631439, 0.00019246901501901448, 0.00035892179585061967, 0.00046242994721978903, 0.00031202370882965624, 0.00043376712710596621, 0.00070533523103222251, 7.572248432552442e-05, 4.9803293222794309e-05, 0.00026347217499278486, 0.00018039249698631465, 0.00018372831982560456, 0.00022444620844908059, 9.4823444669600576e-05, 0.00058422674192115664, 0.00022695497318636626, 0.00024554814444854856, 0.00047050468856468797, 0.00019305449677631259, 0.00018120840832125396, 0.00026084389537572861, 0.00013857262092642486, 0.0001530543522676453, 7.4521878559608012e-05, 0.00020159610721748322, 8.9320761617273092e-05, 0.00024848041357472539, 0.0016787782078608871, 0.00040737917879596353, 0.00014846230624243617, 0.00014254715642891824, 0.00020451427553780377, 8.4533792687579989e-05, 0.0004280720604583621, 0.0002969032502733171, 0.00033411433105356991, 6.2261744460556656e-05, 0.00011398190690670162, 0.00023548179888166487, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data30[1*3*3*48] = { 
  /* [0][0][][] */ 31,-23,7,18,-29,-42,-37,35,-31,-8,21,35,34,-1,-27,-6,86,35,69,19,37,27,-44,3,31,-25,18,-64,-29,92,-53,-127,19,-33,-56,-54,-12,-51,-5,-56,-26,16,-7,23,-29,76,83,6, -80,-60,-24,127,-82,80,-75,123,9,9,-20,26,64,32,-36,-52,-51,56,38,4,37,127,8,127,112,-68,-53,58,95,-89,-42,-75,6,27,-76,-127,22,59,-80,-48,-78,-10,-127,-127,35,96,39,123, 3,20,10,18,-44,2,13,54,13,-48,-66,27,-21,13,-46,-2,-58,-1,-53,-18,-10,-5,57,14,-23,1,-3,94,49,45,-30,-76,-5,-37,-9,109,25,43,25,47,62,-7,-5,-11,12,49,10,-21, 
  /* [0][1][][] */ 2,-17,-21,-12,37,-63,127,-127,-23,-28,48,69,127,49,-12,-25,-84,-33,37,69,107,-53,88,-1,-61,118,-65,-40,127,-64,23,-8,-79,-10,-118,12,3,-86,-34,-57,114,127,6,-98,-63,-66,-85,107, 127,-127,127,-10,127,76,-47,-30,0,127,85,-127,-111,127,127,127,113,123,88,127,127,77,22,-9,93,-127,-127,119,37,127,127,14,-127,127,68,112,-127,127,-127,-127,77,71,-89,-25,127,-127,-108,63, 43,6,-41,-12,-60,127,-90,64,127,-99,-46,92,-58,2,1,-61,81,-10,-127,14,9,-122,-11,-5,80,-19,-35,127,-76,-11,28,-41,-62,-9,114,15,65,1,1,-71,116,18,52,65,-50,115,127,-112, 
  /* [0][2][][] */ 15,37,11,-60,31,-32,22,-34,10,-31,-16,28,-10,30,-19,12,-102,21,3,3,18,-19,127,-18,-127,-17,12,-32,38,15,-28,51,-21,-33,-127,21,-9,-20,40,-49,-32,-18,10,45,2,-31,-82,54, 86,-3,-31,-71,51,92,116,-26,78,-67,-55,30,-53,-13,-22,-82,-80,127,-33,48,-14,-5,22,-18,-96,37,27,-79,-77,21,-58,8,-23,-39,-98,-3,65,-57,4,58,-127,16,-2,43,35,87,-16,-127, 49,33,8,-61,24,45,5,-12,8,-44,-127,21,7,-20,-1,18,127,40,-76,-12,-18,-13,-23,-24,-1,-32,5,-101,-3,21,-54,-26,22,-54,-6,-19,-15,11,47,-5,-38,-9,-7,10,-7,18,89,-40, 
};
const TfArray<48, float> quant30_scale = { 48, { 0.0081919347867369652, 0.0057030315510928631, 0.027447197586297989, 0.012697231955826283, 0.0066473470069468021, 0.0062955068424344063, 0.010821615345776081, 0.016876896843314171, 0.0062322788871824741, 0.0073899459093809128, 0.0081799328327178955, 0.01525417622178793, 0.01965327188372612, 0.013261007145047188, 0.018435101956129074, 0.029976747930049896, 0.0032182054128497839, 0.0021166398655623198, 0.011197566986083984, 0.0076666809618473053, 0.0078084534034132957, 0.0095389634370803833, 0.0040299962274730206, 0.024829637259244919, 0.0096455859020352364, 0.010435795411467552, 0.01999644935131073, 0.0082048159092664719, 0.0077013573609292507, 0.011085865087807178, 0.0058893365785479546, 0.0065048099495470524, 0.0031671798788011074, 0.00856783427298069, 0.0037961322814226151, 0.010560417547821999, 0.071348071098327637, 0.01731361448764801, 0.0063096480444073677, 0.0060582542791962624, 0.008691856637597084, 0.0035926862619817257, 0.018193062394857407, 0.012618388049304485, 0.014199858531355858, 0.0026461242232471704, 0.0048442310653626919, 0.010007976554334164, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[48] = { 4731, 3852, 6625, 3390, 1000, -1023, 5004, 8575, 3626, -440, 3935, -1014, 5567, -2047, 1205, 14794, 76, 2366, 518, 3499, 3590, 2728, 241, 6986, 2887, 4966, 9917, 2143, 4653, 7840, 1306, 1513, 87, 2390, -456, -130, -4177, -1720, 2598, 2507, 5179, 3021, 10550, 4442, 2164, 1795, 3286, 7463, };
const TfArray<48, float> quant31_scale = { 48, { 0.00016286145546473563, 0.00019469835388008505, 0.00014677413855679333, 0.000168153244885616, 0.00034534654696471989, 0.00033252919092774391, 0.00017260441381949931, 0.00011106736201327294, 0.00018086394993588328, 0.00025961935170926154, 0.00023626261099707335, 0.00033769253059290349, 0.00014527095481753349, 0.00024362416297663003, 0.00032715449924580753, 7.5600939453579485e-05, 0.00043744163122028112, 0.00020835903706029058, 0.00035884598037227988, 0.00022415371495299041, 0.00019577353668864816, 0.00025573660968802869, 0.00057383050443604589, 0.00012468091154005378, 0.00026755512226372957, 0.00016898599278647453, 0.00010175467468798161, 0.00024849252076819539, 0.00017267311341129243, 0.00012097079161321744, 0.0003266942803747952, 0.00033757384517230093, 0.00034561124630272388, 0.00023035523190628737, 0.00028115036548115313, 0.00048261208576150239, 0.00017235185077879578, 0.00021467596525326371, 0.0002193301625084132, 0.00021981430472806096, 0.00014357001055032015, 0.00021448179904837161, 9.4199625891633332e-05, 0.00019836574210785329, 0.00026274839183315635, 0.00027529857470653951, 0.00022553927556145936, 0.00012100426101824269, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ 63,125,-127,-89,-13,104,72,41, 
  /* [1][0][][] */ 16,-70,41,-127,-61,77,-72,-40, 
  /* [2][0][][] */ -45,107,127,43,122,0,52,1, 
  /* [3][0][][] */ 60,74,-43,19,-38,-93,-127,23, 
  /* [4][0][][] */ -34,0,-2,-39,-44,127,116,27, 
  /* [5][0][][] */ 22,75,-127,-37,-10,55,-13,-13, 
  /* [6][0][][] */ 33,121,101,68,127,14,28,-25, 
  /* [7][0][][] */ 127,8,0,45,-6,37,56,98, 
  /* [8][0][][] */ 66,64,63,44,127,39,116,-94, 
  /* [9][0][][] */ 44,127,-115,-27,11,73,-27,74, 
  /* [10][0][][] */ -49,-32,9,-47,12,-35,-28,127, 
  /* [11][0][][] */ 6,-70,-127,43,-22,-42,18,-30, 
  /* [12][0][][] */ -52,-98,-127,18,-94,23,-19,-21, 
  /* [13][0][][] */ 13,26,-127,116,-95,-35,19,-29, 
  /* [14][0][][] */ -50,-11,-127,3,36,-3,4,-12, 
  /* [15][0][][] */ 6,-92,-113,49,-127,-31,-54,8, 
  /* [16][0][][] */ 127,-66,0,32,-80,19,46,109, 
  /* [17][0][][] */ -16,123,127,-43,-27,-2,-22,-58, 
  /* [18][0][][] */ 47,-127,13,83,-32,-80,22,-2, 
  /* [19][0][][] */ 75,-28,-32,31,-127,16,27,107, 
  /* [20][0][][] */ -26,-127,95,99,13,-114,-20,-78, 
  /* [21][0][][] */ -11,-33,-5,-23,127,-15,13,12, 
  /* [22][0][][] */ -78,11,-40,36,24,10,-54,-127, 
  /* [23][0][][] */ -68,-5,30,-13,-59,127,80,-62, 
  /* [24][0][][] */ -20,34,-35,-20,-18,127,62,17, 
  /* [25][0][][] */ -52,-103,-103,-127,1,-6,-19,-43, 
  /* [26][0][][] */ -11,42,-22,127,-70,31,-28,5, 
  /* [27][0][][] */ 39,-106,-3,91,8,-57,6,-127, 
  /* [28][0][][] */ 44,84,107,66,127,-59,49,-93, 
  /* [29][0][][] */ 68,-24,-23,51,99,-127,-114,59, 
  /* [30][0][][] */ 55,-10,40,-127,42,-23,19,-32, 
  /* [31][0][][] */ 48,-18,-28,77,-20,7,16,127, 
  /* [32][0][][] */ -111,-23,46,-29,-47,127,45,75, 
  /* [33][0][][] */ -43,14,47,-61,66,127,-51,71, 
  /* [34][0][][] */ 8,127,-73,-52,11,5,-43,99, 
  /* [35][0][][] */ 16,-127,36,17,-23,7,9,-41, 
  /* [36][0][][] */ -10,-47,-72,53,-127,-116,-38,37, 
  /* [37][0][][] */ -21,-105,63,121,-54,-127,-19,5, 
  /* [38][0][][] */ -39,17,41,-34,-127,-51,-53,43, 
  /* [39][0][][] */ -16,-123,50,111,-72,-127,-15,-31, 
  /* [40][0][][] */ -50,77,-19,54,-97,2,-127,33, 
  /* [41][0][][] */ 116,76,-62,-127,65,17,10,-12, 
  /* [42][0][][] */ -6,-48,-55,26,127,17,90,-35, 
  /* [43][0][][] */ 127,-3,86,-2,-28,-19,84,112, 
  /* [44][0][][] */ 29,46,-43,7,52,-57,-127,28, 
  /* [45][0][][] */ 7,26,32,-25,127,-126,-33,-80, 
  /* [46][0][][] */ 121,-20,-15,127,83,57,32,103, 
  /* [47][0][][] */ -127,-61,88,118,-17,-1,104,-127, 
};
const TfArray<48, float> quant32_scale = { 48, { 0.0021030188072472811, 0.0025141264777630568, 0.0018952843965962529, 0.0021713513415306807, 0.0044594360515475273, 0.0042939265258610249, 0.0022288288455456495, 0.0014342052163556218, 0.0023354836739599705, 0.0033524469472467899, 0.0030508427880704403, 0.0043606003746390343, 0.0018758737714961171, 0.0031459019519388676, 0.0042245234362781048, 0.00097622966859489679, 0.0056486534886062145, 0.002690525958314538, 0.0046337535604834557, 0.002894481411203742, 0.002528010169044137, 0.0033023091964423656, 0.007409833837300539, 0.00160999596118927, 0.0034549208357930183, 0.002182104391977191, 0.0013139510992914438, 0.0032087666913866997, 0.0022297159302979708, 0.0015620874473825097, 0.0042185806669294834, 0.0043590678833425045, 0.0044628540053963661, 0.0029745611827820539, 0.0036304753739386797, 0.0062319366261363029, 0.0022255675867199898, 0.0027720958460122347, 0.0028321952559053898, 0.0028384469915181398, 0.0018539095763117075, 0.0027695887256413698, 0.001216393313370645, 0.0025614830665290356, 0.0033928519114851952, 0.0035549113526940346, 0.00291237304918468, 0.0015625196974724531, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[8] = { 2025, 5929, -4605, 6691, -3553, 7578, -6853, -14180, };
const TfArray<8, float> quant33_scale = { 8, { 0.0001154369892901741, 0.00011857453500851989, 0.00013280862185638398, 9.1270972916390747e-05, 0.00017651307280175388, 0.00012739839439745992, 0.00014519735123030841, 0.00011559954873519018, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data34[8*1*1*48] = { 
  /* [0][0][][] */ -51,-1,39,31,-26,1,24,6,-50,2,-57,-60,-18,-47,-16,-17,57,-47,48,44,-17,26,-51,7,-18,-25,47,2,-2,-21,11,8,82,63,45,-127,29,6,-7,-46,19,-16,51,66,45,6,43,9, 
  /* [1][0][][] */ 22,38,66,-2,14,40,-50,-9,-13,-3,21,-103,23,94,-9,65,-45,12,-30,-57,22,-70,-25,30,-53,-12,19,-112,-40,-4,28,-68,36,57,-30,-6,122,-3,-11,46,-59,62,-73,-48,127,-7,-13,-16, 
  /* [2][0][][] */ -1,-43,-70,9,14,74,23,4,-10,46,-21,29,77,-94,10,-63,35,-77,30,37,-39,79,-6,40,-6,47,-26,-77,15,9,1,-91,-69,-100,31,-32,85,42,-29,-71,-16,41,85,27,127,43,22,54, 
  /* [3][0][][] */ -21,41,-55,44,-3,-38,-77,-80,-3,-20,-17,-14,6,34,20,89,-25,-15,-26,33,19,-104,46,-63,-78,-14,127,-14,-50,8,-69,14,17,-27,10,-30,-21,-30,-10,73,-63,-16,3,17,43,-4,-45,35, 
  /* [4][0][][] */ -30,-46,-6,-5,33,-28,-1,3,15,-54,59,-67,-2,16,-2,2,-11,-13,-2,-8,-1,-37,7,-29,31,-7,31,26,26,24,-28,15,-12,-13,-1,7,-63,92,42,-20,35,-29,-16,-24,-83,6,127,8, 
  /* [5][0][][] */ 45,-25,-5,25,24,-26,28,-127,44,-40,-19,95,-82,61,19,-67,10,-74,32,11,-60,62,-36,-29,-59,71,-27,-13,-5,58,-17,-30,26,46,33,17,-31,-3,-36,-39,30,-30,-53,7,-26,48,76,25, 
  /* [6][0][][] */ 50,-29,11,-27,-28,-23,-35,29,-44,-28,-41,127,-58,-58,0,58,10,54,24,52,44,-87,-23,6,24,29,-69,-3,16,-46,4,30,16,1,-3,-16,14,25,-11,-6,-11,-34,43,61,-16,-46,68,-28, 
  /* [7][0][][] */ -25,19,1,74,5,32,-6,21,8,4,51,11,116,110,58,42,12,61,-13,17,29,-23,-74,-49,12,-30,-48,95,13,-55,-34,-14,38,22,33,-127,-101,13,2,70,-41,30,86,126,-72,-4,-116,77, 
};
const TfArray<8, float> quant34_scale = { 8, { 0.0049060718156397343, 0.0050394176505506039, 0.0056443666107952595, 0.0038790162652730942, 0.0075018052011728287, 0.0054144319146871567, 0.0061708875000476837, 0.0049129808321595192, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data35[48] = { 9295, 3177, 5854, -4278, 12000, -1283, 3533, 31795, -3865, -1537, 5035, 38037, 8385, 9782, 504, 9510, -3088, 18949, -1327, 8841, 24113, 114, 2596, -169, 18848, 4717, -9173, 11330, 9915, -3204, -8765, 11946, 7185, 6327, -1800, 7049, -9282, 4887, 4299, 18291, -5552, 1862, 8142, 2932, 1299, -214, 7129, -1837, };
const TfArray<48, float> quant35_scale = { 48, { 9.2585964011959732e-05, 0.00014621511218138039, 0.00012903739116154611, 0.0001080797883332707, 0.00045186129864305258, 0.00019281719869468361, 6.0809521528426558e-05, 0.00010680352716008201, 0.00012313878687564284, 9.5620729553047568e-05, 6.5403044573031366e-05, 4.7902314690873027e-05, 0.00010362117609474808, 4.6883997129043564e-05, 0.00034068754757754505, 0.00012285429693292826, 0.00013004349602852017, 0.00032698924769647419, 0.00017239754379261285, 0.0001202840794576332, 0.00010634964564815164, 0.00033476061071269214, 9.9447162938304245e-05, 0.00021811244369018823, 7.331828965106979e-05, 5.0406346417730674e-05, 6.7381130065768957e-05, 0.0001241860882146284, 0.00014922185800969601, 0.000809402612503618, 0.00015427025209646672, 7.3543524194974452e-05, 0.00014521373668685555, 0.00013146040146239102, 0.00021510987426154315, 5.8902161981677637e-05, 7.236256351461634e-05, 9.918084106175229e-05, 7.3606119258329272e-05, 5.4890148021513596e-05, 9.3916693003848195e-05, 0.00022245397849474102, 5.7737470342544839e-05, 5.7840352383209392e-05, 7.5819742050953209e-05, 0.00024117038992699236, 7.3303388489875942e-05, 0.00011461010581115261, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data36[1*3*3*48] = { 
  /* [0][0][][] */ 6,-50,-81,-16,127,-64,94,-6,-52,-106,-39,-18,123,2,29,-127,59,-64,20,-86,-98,127,-26,-63,-32,37,70,-24,26,-55,-13,-101,-127,-74,28,63,-34,74,114,-63,-112,-56,82,41,110,-112,57,93, -70,-68,-106,79,-100,103,18,-48,-63,35,77,-69,127,101,60,-125,-69,-111,26,-29,-109,99,-12,69,-88,-4,102,-127,56,-37,-10,-79,-16,-96,79,91,127,120,118,-28,-127,-27,127,69,120,127,54,40, -8,-25,-122,101,-102,-30,41,-14,90,51,97,-65,25,74,-51,-49,-51,-35,60,-53,-87,67,-107,-3,1,51,45,-67,3,38,120,8,0,-18,-7,69,121,35,23,-22,-80,89,123,-10,127,37,7,-127, 
  /* [0][1][][] */ -24,-36,-43,-77,-85,-88,127,-42,-127,-127,82,-70,67,65,-127,-44,127,-105,-58,-127,-80,88,-52,-55,-18,74,88,-87,-127,-61,-13,-127,-58,-127,-127,21,-25,127,-41,-127,77,-55,18,127,66,116,121,-90, -94,-26,-122,-50,-53,127,103,-127,48,57,127,-127,83,127,47,-62,55,-127,-127,-61,-74,69,-127,127,-58,69,101,-73,-119,127,-32,-110,-99,-105,41,127,85,88,-74,-101,105,-94,76,120,91,16,127,123, -10,-22,-127,127,25,-33,26,-71,99,61,-7,-65,10,44,33,-67,7,-25,-31,-37,-114,30,-76,-49,-38,46,26,-51,-78,42,127,-116,-4,-24,62,83,87,6,-79,10,75,127,84,8,50,-77,5,31, 
  /* [0][2][][] */ -103,-127,63,18,-66,-27,52,-22,39,-32,25,-29,-43,32,-59,14,-89,-8,78,-1,-33,-21,-83,-40,-10,98,106,-88,-6,75,-6,-4,7,-98,-34,72,0,-20,-127,-98,57,-29,-21,26,26,54,11,-60, -127,-98,11,-38,73,32,4,-110,104,-6,-75,-19,-36,27,-88,-52,12,39,69,-69,-127,35,-61,54,-127,127,127,-21,4,16,-51,-11,-47,-42,-47,76,67,-27,-125,-63,91,-77,22,107,-7,-106,32,16, -37,-120,-20,-24,-66,-3,-19,-47,-2,43,-58,21,-11,10,25,-22,22,69,5,-46,-115,-52,9,-67,-51,33,40,26,-23,-52,44,3,-88,10,19,119,39,-2,-79,-93,45,38,-27,19,5,-37,27,100, 
};
const TfArray<48, float> quant36_scale = { 48, { 0.0039349035359919071, 0.0062141423113644123, 0.0054840887896716595, 0.0045933909714221954, 0.019204104319214821, 0.0081947306171059608, 0.0025844045449048281, 0.0045391498133540154, 0.0052333981730043888, 0.0040638810023665428, 0.0027796293143182993, 0.002035848330706358, 0.0044038998894393444, 0.0019925697706639767, 0.014479220844805241, 0.0052213072776794434, 0.0055268486030399799, 0.013897042721509933, 0.0073268953710794449, 0.0051120733842253685, 0.0045198597945272923, 0.014227326028048992, 0.0042265043593943119, 0.0092697786167263985, 0.0031160272192209959, 0.0021422696299850941, 0.0028636979404836893, 0.0052779088728129864, 0.0063419286161661148, 0.034399610012769699, 0.0065564857795834541, 0.0031255998183041811, 0.0061715836636722088, 0.0055870669893920422, 0.0091421697288751602, 0.0025033417623490095, 0.0030754087492823601, 0.0042151855304837227, 0.0031282599084079266, 0.0023328312672674656, 0.003991459496319294, 0.0094542941078543663, 0.0024538424331694841, 0.0024582149926573038, 0.003222338855266571, 0.01024974137544632, 0.0031153939198702574, 0.0048709292896091938, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[48] = { 1298, -1062, -325, 946, 28706, 3004, -505, 4230, 1919, 1060, -155, 2960, 250, 454, -775, -44, 1093, 15224, 2945, -954, 2743, -1089, -426, 4445, -39, -753, 2767, -179, 4550, 10699, 3762, 23, 1460, 448, 3130, -496, 827, -803, 489, 679, 1640, 5172, 298, -80, 415, 1951, 1102, 28, };
const TfArray<48, float> quant37_scale = { 48, { 0.00040735947550274432, 0.00032968726009130478, 0.00036328908754512668, 0.00029222533339634538, 4.1929186409106478e-05, 0.00026678343419916928, 0.00065001763869076967, 0.00021982644102536142, 0.00026939291274175048, 0.00071881373878568411, 0.00037314969813451171, 0.00025267348974011838, 0.00031709644827060401, 0.00038617837708443403, 0.00038037882768549025, 0.00039203287451528013, 0.00043891905806958675, 7.0494017563760281e-05, 0.00027643522480502725, 0.00029755485593341291, 0.00027738630888052285, 0.00023663108004257083, 0.00039643951458856463, 0.00022036398877389729, 0.00043963294592685997, 0.00063263223273679614, 0.00023159403644967824, 0.00077583047095686197, 0.00020500697428360581, 8.12752332421951e-05, 0.00022844238264951855, 0.00059922353830188513, 0.00034094849252142012, 0.00031382698216475546, 0.00028702459530904889, 0.00034136261092498899, 0.00034517358290031552, 0.00033584106131456792, 0.00045799592044204473, 0.0005776530597358942, 0.00041956282802857459, 0.00018419272964820266, 0.00037187588168308139, 0.00047382427146658301, 0.00044967056601308286, 0.00029421172803267837, 0.00031064360518939793, 0.00043495275895111263, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -32,28,-26,-34,-67,-18,-127,47, 
  /* [1][0][][] */ 47,-49,-71,-70,100,-127,62,51, 
  /* [2][0][][] */ -115,93,-23,-127,6,-83,-22,-28, 
  /* [3][0][][] */ 51,-23,113,75,65,127,115,-14, 
  /* [4][0][][] */ -95,-127,70,-1,-79,-118,36,-89, 
  /* [5][0][][] */ 127,-35,58,40,-48,-44,27,-51, 
  /* [6][0][][] */ 26,28,127,-15,39,-7,-32,18, 
  /* [7][0][][] */ 32,4,-86,-15,-55,113,127,-81, 
  /* [8][0][][] */ 6,127,-8,13,83,94,16,64, 
  /* [9][0][][] */ -38,48,-41,6,-43,-127,-4,39, 
  /* [10][0][][] */ 23,-122,-10,-47,-66,-127,-37,-61, 
  /* [11][0][][] */ -127,-103,106,65,-29,-62,87,68, 
  /* [12][0][][] */ -36,38,-127,57,27,-42,-58,73, 
  /* [13][0][][] */ 99,-127,102,97,2,-3,82,-72, 
  /* [14][0][][] */ -8,74,-30,-127,-15,-69,-7,-44, 
  /* [15][0][][] */ 64,127,28,4,36,-51,99,-116, 
  /* [16][0][][] */ -83,-127,-30,24,-27,3,-37,43, 
  /* [17][0][][] */ -35,-127,-85,57,-68,78,-37,66, 
  /* [18][0][][] */ -127,-73,-95,40,-27,29,-45,107, 
  /* [19][0][][] */ 53,-115,127,-106,12,-52,57,-39, 
  /* [20][0][][] */ -23,29,34,34,-1,127,64,-28, 
  /* [21][0][][] */ 39,93,48,-15,33,-55,80,-127, 
  /* [22][0][][] */ 48,31,113,9,22,127,9,-6, 
  /* [23][0][][] */ -67,-77,29,-57,88,86,-77,-127, 
  /* [24][0][][] */ -100,-107,47,-48,67,74,-11,-127, 
  /* [25][0][][] */ 127,16,-62,-19,24,31,-48,8, 
  /* [26][0][][] */ -126,-17,-127,-18,-43,-21,1,15, 
  /* [27][0][][] */ 57,-11,14,-67,-127,-40,67,55, 
  /* [28][0][][] */ -71,-70,-8,45,-30,-127,22,4, 
  /* [29][0][][] */ 118,127,-13,-102,96,76,1,-73, 
  /* [30][0][][] */ -18,-55,69,-50,65,71,-24,-127, 
  /* [31][0][][] */ 53,44,-12,127,9,-61,53,-15, 
  /* [32][0][][] */ -46,127,-19,-9,13,3,8,-1, 
  /* [33][0][][] */ -90,112,-52,-13,-16,-127,-52,-56, 
  /* [34][0][][] */ -88,-85,-23,127,-13,29,15,72, 
  /* [35][0][][] */ -61,127,-31,-27,48,109,75,75, 
  /* [36][0][][] */ 78,41,-6,-62,-102,0,127,86, 
  /* [37][0][][] */ -83,123,33,-30,-114,127,-50,-70, 
  /* [38][0][][] */ 4,52,-4,29,127,82,53,54, 
  /* [39][0][][] */ -9,-69,48,-16,19,39,-72,127, 
  /* [40][0][][] */ -45,-29,-46,123,24,53,5,127, 
  /* [41][0][][] */ 127,5,82,51,-47,-29,-9,-34, 
  /* [42][0][][] */ -30,14,-70,-127,80,-114,12,39, 
  /* [43][0][][] */ 33,-6,106,-10,35,127,73,10, 
  /* [44][0][][] */ -14,-13,-58,127,51,-2,-37,-34, 
  /* [45][0][][] */ 47,65,86,-95,15,-56,58,-127, 
  /* [46][0][][] */ -14,-111,13,34,-1,49,-64,127, 
  /* [47][0][][] */ 83,29,127,33,66,47,71,-33, 
};
const TfArray<48, float> quant38_scale = { 48, { 0.0041398089379072189, 0.0033504616003483534, 0.0036919417325407267, 0.0029697529971599579, 0.00042610726086422801, 0.0027111985255032778, 0.0066058333031833172, 0.0022339960560202599, 0.0027377177029848099, 0.0073049766942858696, 0.0037921506445854902, 0.0025678058154881001, 0.0032225069589912891, 0.0039245551452040672, 0.0038656170945614576, 0.0039840517565608025, 0.0044605345465242863, 0.00071639864472672343, 0.00280928541906178, 0.0030239145271480083, 0.0028189509175717831, 0.0024047740735113621, 0.0040288344025611877, 0.0022394589614123106, 0.0044677895493805408, 0.0064291534945368767, 0.0023535848595201969, 0.0078844120725989342, 0.0020833925809711218, 0.0008259632159024477, 0.0023215559776872396, 0.0060896361246705055, 0.0034649043809622526, 0.0031892808619886637, 0.0029169004410505295, 0.0034691127948462963, 0.0035078420769423246, 0.0034129999112337828, 0.004654404241591692, 0.0058704251423478127, 0.0042638261802494526, 0.0018718668725341558, 0.0037792054936289787, 0.0048152604140341282, 0.0045697973109781742, 0.0029899398796260357, 0.0031569295097142458, 0.0044202269054949284, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[8] = { -7118, -7050, 9774, -11620, 21688, 9293, -15082, 16797, };
const TfArray<8, float> quant39_scale = { 8, { 0.000198246372747235, 0.00026432430604472756, 0.0001754009717842564, 0.0002650216338224709, 0.0001819672470446676, 0.00018674389866646379, 0.00015257240738719702, 0.00024494461831636727, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data40[8*1*1*16] = { 
  /* [0][0][][] */ 1,-23,-32,-102,-13,-32,19,-23,30,16,-39,-7,99,127,-23,-97, 
  /* [1][0][][] */ 127,-40,-45,1,-55,55,-54,-34,-38,76,-40,-34,-27,6,-50,-20, 
  /* [2][0][][] */ -43,-95,59,46,41,-68,-60,-6,55,-114,35,-127,67,-22,-71,19, 
  /* [3][0][][] */ 44,1,20,18,-36,80,-54,-28,127,62,16,2,6,-22,17,4, 
  /* [4][0][][] */ -82,-38,-31,-99,26,82,46,-127,58,20,-64,-64,-98,30,-38,-35, 
  /* [5][0][][] */ 84,39,74,-36,35,-52,-127,-122,-21,-69,85,35,-43,48,49,-34, 
  /* [6][0][][] */ 114,45,-127,-72,51,-80,5,-79,-11,5,-120,104,113,-92,-1,63, 
  /* [7][0][][] */ -127,-3,85,-45,-71,-9,-6,-55,-62,46,90,-25,38,-21,18,25, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0084254704415798187, 0.011233783327043056, 0.0074545410461723804, 0.011263418942689896, 0.0077336081303656101, 0.0079366154968738556, 0.0064843273721635342, 0.010410145856440067, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data41[16] = { 18628, 2544, 287, 4206, -341, -3, 15832, 1912, -555, 103, -1263, 213, 10218, -537, -1409, -3369, };
const TfArray<16, float> quant41_scale = { 16, { 0.00016013890854083002, 0.00026544916909188032, 0.00024452459183521569, 0.00021046126494184136, 0.0011343947844579816, 0.0013122648233547807, 0.0001059479036484845, 0.0011090402258560061, 0.00043609293061308563, 0.0015404938021674752, 0.00031070449040271342, 0.00022802175953984261, 9.1273177531547844e-05, 0.00031821563607081771, 0.00029382723732851446, 0.0002407008723821491, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data42[1*3*3*16] = { 
  /* [0][0][][] */ 8,-21,18,6,-20,13,17,14,-8,-11,-12,-16,-17,-4,-1,7, 10,-24,18,3,10,-1,12,-29,-14,9,-14,76,-20,22,3,6, -5,-40,-2,-6,-2,-12,-16,7,3,2,12,-38,1,-3,-23,9, 
  /* [0][1][][] */ 16,-26,10,5,127,-22,-127,-22,127,127,11,-8,83,-21,-5,-6, -127,127,127,-6,-88,-90,-13,-104,8,-105,127,127,127,127,127,127, 10,-32,-7,-10,-14,127,0,-13,-5,-12,-13,-17,8,-6,-17,2, 
  /* [0][2][][] */ 9,-1,17,-25,-17,16,45,6,-24,-7,-23,-1,-4,0,-1,1, 28,-34,3,-127,3,-14,-16,127,-8,2,-21,-6,-30,-57,-5,-22, -6,-28,4,-7,-6,-5,1,-5,-1,4,-20,1,-5,-9,-18,0, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0068059032782912254, 0.011281589046120644, 0.010392295196652412, 0.0089446036145091057, 0.048211779445409775, 0.055771254003047943, 0.0045027858577668667, 0.047134209424257278, 0.018533948808908463, 0.065470986068248749, 0.013204940594732761, 0.0096909245476126671, 0.003879109863191843, 0.013524164445698261, 0.012487657368183136, 0.010229786857962608, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant9_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[16] = { 1727, 4007, -674, 597, 6800, 33978, 3446, 15914, 4460, 5436, 924, 2379, 2619, 5859, 2781, 25225, };
const TfArray<16, float> quant43_scale = { 16, { 0.00032292981632053852, 0.00038493989268317819, 0.00056218559620901942, 0.00026311108376830816, 6.2452782003674656e-05, 4.1704439354361966e-05, 0.00024769350420683622, 3.2834748708410189e-05, 0.00024205159570556134, 6.5209125750698149e-05, 0.0010850974358618259, 0.00048108128248713911, 0.00056451529962942004, 3.2083458791021258e-05, 0.00037863719626329839, 3.7148231058381498e-05, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data44[16*3*3*1] = { 
  /* [0][0][][] */ -90, -115, -33, 
  /* [0][1][][] */ 65, -40, 15, 
  /* [0][2][][] */ 30, 127, 19, 
  /* [1][0][][] */ 96, -96, -15, 
  /* [1][1][][] */ -127, 95, 17, 
  /* [1][2][][] */ 8, -7, -17, 
  /* [2][0][][] */ -22, -1, -46, 
  /* [2][1][][] */ 37, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 119, 125, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -102, -127, -43, 
  /* [4][0][][] */ 48, 25, 117, 
  /* [4][1][][] */ 9, -71, 122, 
  /* [4][2][][] */ 34, -127, 49, 
  /* [5][0][][] */ -76, 8, 4, 
  /* [5][1][][] */ -127, 27, 22, 
  /* [5][2][][] */ -49, 41, 27, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -54, 54, -18, 
  /* [6][2][][] */ -42, -57, -94, 
  /* [7][0][][] */ 21, 13, -11, 
  /* [7][1][][] */ 127, 49, -8, 
  /* [7][2][][] */ 24, 5, -15, 
  /* [8][0][][] */ -23, -32, 52, 
  /* [8][1][][] */ -55, -87, 127, 
  /* [8][2][][] */ -27, -61, 96, 
  /* [9][0][][] */ -42, 44, -12, 
  /* [9][1][][] */ -26, 127, -23, 
  /* [9][2][][] */ -8, 87, -19, 
  /* [10][0][][] */ 24, 86, 10, 
  /* [10][1][][] */ -37, -127, -31, 
  /* [10][2][][] */ 11, 39, 16, 
  /* [11][0][][] */ 4, -23, 7, 
  /* [11][1][][] */ 63, -99, 33, 
  /* [11][2][][] */ -91, 127, -51, 
  /* [12][0][][] */ -40, 51, -8, 
  /* [12][1][][] */ -127, 116, 7, 
  /* [12][2][][] */ -78, 81, 7, 
  /* [13][0][][] */ 34, -1, -18, 
  /* [13][1][][] */ 127, 51, -17, 
  /* [13][2][][] */ 65, 66, -2, 
  /* [14][0][][] */ -34, -31, 43, 
  /* [14][1][][] */ 39, 92, -127, 
  /* [14][2][][] */ -20, -72, 75, 
  /* [15][0][][] */ -85, -24, 17, 
  /* [15][1][][] */ -127, -119, 15, 
  /* [15][2][][] */ -14, -71, -20, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant44_scale = { 16, { 0.082347095012664795, 0.098159663379192352, 0.14335732161998749, 0.067093320190906525, 0.015925457701086998, 0.010634631849825382, 0.063161842525005341, 0.0083728600293397903, 0.061723154038190842, 0.0166283268481493, 0.27669984102249146, 0.12267571687698364, 0.14395138621330261, 0.0081812813878059387, 0.096552476286888123, 0.0094727985560894012, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,98,98,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,98,98,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.098400548100471497, } };
const TfArray<1, int> quant47_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,98,98,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,99,99,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,49,49,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.077441751956939697, } };
const TfArray<1, int> quant51_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.070010349154472351, } };
const TfArray<1, int> quant54_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<1, float> quant55_scale = { 1, { 0.10620835423469543, } };
const TfArray<1, int> quant55_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,51,51,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant59_scale = { 1, { 0.06000959500670433, } };
const TfArray<1, int> quant59_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant62_scale = { 1, { 0.063706927001476288, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.091548554599285126, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.077633701264858246, } };
const TfArray<1, int> quant66_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.13362440466880798, } };
const TfArray<1, int> quant67_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,25,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.084974847733974457, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,25,25,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.19935208559036255, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant51_zero, 0 };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,44,43 } };
const TfArray<1, int> outputs0 = { 1, { 45 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 45,42,41 } };
const TfArray<1, int> outputs1 = { 1, { 46 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 46,40,39 } };
const TfArray<1, int> outputs2 = { 1, { 47 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 47,38,37 } };
const TfArray<1, int> outputs3 = { 1, { 48 } };
const TfArray<2, int> inputs4 = { 2, { 48,1 } };
const TfArray<1, int> outputs4 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 49,36,35 } };
const TfArray<1, int> outputs5 = { 1, { 50 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 50,34,33 } };
const TfArray<1, int> outputs6 = { 1, { 51 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 51,32,31 } };
const TfArray<1, int> outputs7 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 52,30,29 } };
const TfArray<1, int> outputs8 = { 1, { 53 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 53,28,27 } };
const TfArray<1, int> outputs9 = { 1, { 54 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 51,54 } };
const TfArray<1, int> outputs10 = { 1, { 55 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 55,26,25 } };
const TfArray<1, int> outputs11 = { 1, { 56 } };
const TfArray<2, int> inputs12 = { 2, { 56,2 } };
const TfArray<1, int> outputs12 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 57,24,23 } };
const TfArray<1, int> outputs13 = { 1, { 58 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 58,22,21 } };
const TfArray<1, int> outputs14 = { 1, { 59 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 59,20,19 } };
const TfArray<1, int> outputs15 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 60,18,17 } };
const TfArray<1, int> outputs16 = { 1, { 61 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 61,16,15 } };
const TfArray<1, int> outputs17 = { 1, { 62 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 59,62 } };
const TfArray<1, int> outputs18 = { 1, { 63 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 63,14,13 } };
const TfArray<1, int> outputs19 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 64,12,11 } };
const TfArray<1, int> outputs20 = { 1, { 65 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 65,10,9 } };
const TfArray<1, int> outputs21 = { 1, { 66 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 63,66 } };
const TfArray<1, int> outputs22 = { 1, { 67 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 67,8,7 } };
const TfArray<1, int> outputs23 = { 1, { 68 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 68,6,5 } };
const TfArray<1, int> outputs24 = { 1, { 69 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 69,4,3 } };
const TfArray<1, int> outputs25 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 70 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 38416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension12, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 153664), (TfLiteIntArray*)&g0::tensor_dimension45, 153664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 153664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 153664), (TfLiteIntArray*)&g0::tensor_dimension47, 76832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 470448), (TfLiteIntArray*)&g0::tensor_dimension48, 460992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 470448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 470448), (TfLiteIntArray*)&g0::tensor_dimension50, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230496), (TfLiteIntArray*)&g0::tensor_dimension51, 19208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension51, 19208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension51, 19208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 124848), (TfLiteIntArray*)&g0::tensor_dimension50, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 124848, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 124848), (TfLiteIntArray*)&g0::tensor_dimension58, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 154848), (TfLiteIntArray*)&g0::tensor_dimension59, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension59, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension59, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 70000), (TfLiteIntArray*)&g0::tensor_dimension59, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension59, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension69, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1888), (TfLiteIntArray*)&g0::tensor_dimension70, 1875, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1875, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
